{
  "address": "0xC45637a6ee993499916FaBbCDad2E0b662729351",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "callSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "decoderEncoderSwapAmount",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneInchRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x24165da0ad9a711389406bcd03bdee4f259b5569be52daf9b4f33a45bf1cafad",
  "receipt": {
    "to": null,
    "from": "0xEab48A633Ada8565f2cdeB5cDE162909Fd64b749",
    "contractAddress": "0xC45637a6ee993499916FaBbCDad2E0b662729351",
    "transactionIndex": 0,
    "gasUsed": "1276597",
    "logsBloom": "0x00000000000000000000000000000000000000800000000000800000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000040001000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000002000000000000000000000000000000000000",
    "blockHash": "0xccdb5059a51d0e85d696989c6ba092bb820dabbd93acdbceb237f7904a1deef5",
    "transactionHash": "0x24165da0ad9a711389406bcd03bdee4f259b5569be52daf9b4f33a45bf1cafad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27469779,
        "transactionHash": "0x24165da0ad9a711389406bcd03bdee4f259b5569be52daf9b4f33a45bf1cafad",
        "address": "0xC45637a6ee993499916FaBbCDad2E0b662729351",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eab48a633ada8565f2cdeb5cde162909fd64b749"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xccdb5059a51d0e85d696989c6ba092bb820dabbd93acdbceb237f7904a1deef5"
      }
    ],
    "blockNumber": 27469779,
    "cumulativeGasUsed": "1276597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6188a0a22d3931c7365c57eb81aedc27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"callSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"decoderEncoderSwapAmount\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"callSwap(uint256,address,address,bytes)\":{\"details\":\"Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.\",\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the 1inch aggregator router.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"title\":\"OneInchUniswapV3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callSwap(uint256,address,address,bytes)\":{\"notice\":\"Swap the given amount of tokens using 1inch.\"}},\"notice\":\"Swapper contract for 1inch swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Swap/OneInch/OneInchSwapAdapter.sol\":\"OneInchSwapAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/Swap/OneInch/OneInchSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ISwapper} from \\\"../interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title OneInchUniswapV3\\n * @notice Swapper contract for 1inch swaps.\\n */\\ncontract OneInchSwapAdapter is ISwapper, Ownable2Step {\\n  using Address for address;\\n  using Address for address payable;\\n\\n  address public immutable oneInchRouter = address(0x1111111254EEB25477B68fb85Ed929f73A960582);\\n\\n  receive() external payable virtual {}\\n\\n  struct SwapDescription {\\n    address srcToken;\\n    address dstToken;\\n    address srcReceiver;\\n    address dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n  }\\n\\n  /**\\n   * @notice Swap the given amount of tokens using 1inch.\\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\\n   * until the funds are transferred to this contract.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the 1inch aggregator router.\\n   */\\n  function callSwap(\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData // from 1inch API\\n  ) public payable returns (uint256 amountOut) {\\n    // transfer the funds to be swapped from the sender into this contract\\n    TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\\n\\n    if (IERC20(_fromAsset).allowance(address(this), address(oneInchRouter)) < _amountIn) {\\n      TransferHelper.safeApprove(_fromAsset, address(oneInchRouter), type(uint256).max);\\n    }\\n\\n    // decode & encode the swap data\\n    // the data included with the swap encodes with the selector so we need to remove it\\n    // https://docs.1inch.io/docs/aggregation-protocol/smart-contract/UnoswapV3Router#uniswapv3swap\\n    bytes memory _data = decoderEncoderSwapAmount(_amountIn, _swapData);\\n\\n    // Set up swap params\\n    // Approve the swapper if needed\\n\\n    // The call to `uniswapV3Swap` executes the swap.\\n    // use actual amountIn that was sent to the xReceiver\\n    bytes memory returned = address(oneInchRouter).functionCall(_data, \\\"!callSwap\\\");\\n\\n    // (uint256 _a, uint256 _g) = abi.decode(returned, (uint256, uint256));\\n    // amountOut = _a;\\n    // transfer the swapped funds back to the sender\\n    // TransferHelper.safeTransfer(_toAsset, msg.sender, amountOut);\\n  }\\n\\n  function decoderEncoderSwapAmount(uint256 _amount, bytes calldata _swapData) public returns (bytes memory) {\\n    // Decode and Encode the swap data with new amountIn\\n    (bool success, bytes memory data) = address(this).call(\\n      abi.encodeWithSelector(bytes4(_swapData[4:]), _amount, _swapData)\\n    );\\n\\n    return data;\\n  }\\n\\n  function swap(uint256 _amount, bytes calldata _swapData) internal pure returns (bytes memory) {\\n    // decode the swap data\\n    (address executor, SwapDescription memory desc, bytes memory permit, bytes memory _d) = abi.decode(\\n      _swapData[4:],\\n      (address, SwapDescription, bytes, bytes)\\n    );\\n\\n    desc.amount = _amount;\\n\\n    bytes memory encoded = abi.encodeWithSelector(bytes4(_swapData[4:]), executor, desc, permit, _d);\\n    return encoded;\\n  }\\n\\n  function uniswapV3Swap(uint256 _amount, bytes calldata _swapData) internal pure returns (bytes memory) {\\n    // decode the swap data\\n    (uint256 amount, uint256 minReturn, uint256[] memory pools) = abi.decode(\\n      _swapData[4:],\\n      (uint256, uint256, uint256[])\\n    );\\n\\n    // encode the swap data\\n    bytes memory encoded = abi.encodeWithSelector(bytes4(_swapData[4:]), _amount, minReturn, pools);\\n    return encoded;\\n  }\\n}\\n\",\"keccak256\":\"0xc328121588b8371d01cfc455cc04d5d0a380bfc27a9a72b5ab014d7a008dd537\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function callSwap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x112d3dad7dfbde660f12613f6407ee441c70e3cd43abe7909d91df4739000e5a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a0604052731111111254eeb25477b68fb85ed929f73a96058273ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561005757600080fd5b5061007461006961007960201b60201c565b61008160201b60201c565b61017c565b600033905090565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556100b5816100b860201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6080516115a96101ac600039600081816103d40152818161045d015281816104f0015261054301526115a96000f3fe60806040526004361061007f5760003560e01c80638e16caa31161004e5780638e16caa314610121578063ac3af20814610151578063e30c39781461017c578063f2fde38b146101a757610086565b8063715018a61461008b57806379ba5097146100a2578063882fbe36146100b95780638da5cb5b146100f657610086565b3661008657005b600080fd5b34801561009757600080fd5b506100a06101d0565b005b3480156100ae57600080fd5b506100b76101e4565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610cd6565b610271565b6040516100ed9190610dc6565b60405180910390f35b34801561010257600080fd5b5061010b61037d565b6040516101189190610e29565b60405180910390f35b61013b60048036038101906101369190610e70565b6103a6565b6040516101489190610f07565b60405180910390f35b34801561015d57600080fd5b50610166610541565b6040516101739190610e29565b60405180910390f35b34801561018857600080fd5b50610191610565565b60405161019e9190610e29565b60405180910390f35b3480156101b357600080fd5b506101ce60048036038101906101c99190610f22565b61058f565b005b6101d861063c565b6101e260006106ba565b565b60006101ee6106eb565b90508073ffffffffffffffffffffffffffffffffffffffff1661020f610565565b73ffffffffffffffffffffffffffffffffffffffff1614610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610fd2565b60405180910390fd5b61026e816106ba565b50565b60606000803073ffffffffffffffffffffffffffffffffffffffff16858560049080926102a093929190610ffc565b906102ab919061107b565b8787876040516024016102c093929190611116565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161032a9190611184565b6000604051808303816000865af19150503d8060008114610367576040519150601f19603f3d011682016040523d82523d6000602084013e61036c565b606091505b509150915080925050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006103b4853330896106f3565b858573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161041092919061119b565b602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906111d9565b10156104a3576104a2857f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61084b565b5b60006104b0878585610271565b90506000610534826040518060400160405280600981526020017f2163616c6c5377617000000000000000000000000000000000000000000000008152507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109a09092919063ffffffff16565b9050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059761063c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166105f761037d565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6106446106eb565b73ffffffffffffffffffffffffffffffffffffffff1661066261037d565b73ffffffffffffffffffffffffffffffffffffffff16146106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90611252565b60405180910390fd5b565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556106e8816109b8565b50565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161072a93929190611272565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107949190611184565b6000604051808303816000865af19150503d80600081146107d1576040519150601f19603f3d011682016040523d82523d6000602084013e6107d6565b606091505b5091509150818015610804575060008151148061080357508080602001905181019061080291906112e1565b5b5b610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a9061135a565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161088092919061137a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108ea9190611184565b6000604051808303816000865af19150503d8060008114610927576040519150601f19603f3d011682016040523d82523d6000602084013e61092c565b606091505b509150915081801561095a575060008151148061095957508080602001905181019061095891906112e1565b5b5b610999576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610990906113ef565b60405180910390fd5b5050505050565b60606109af8484600085610a7c565b90509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606082471015610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890611481565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610aea9190611184565b60006040518083038185875af1925050503d8060008114610b27576040519150601f19603f3d011682016040523d82523d6000602084013e610b2c565b606091505b5091509150610b3d87838387610b49565b92505050949350505050565b60608315610bab576000835103610ba357610b6385610bbe565b610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b99906114ed565b60405180910390fd5b5b829050610bb6565b610bb58383610be1565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610bf45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c289190611551565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b610c4e81610c3b565b8114610c5957600080fd5b50565b600081359050610c6b81610c45565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c9657610c95610c71565b5b8235905067ffffffffffffffff811115610cb357610cb2610c76565b5b602083019150836001820283011115610ccf57610cce610c7b565b5b9250929050565b600080600060408486031215610cef57610cee610c31565b5b6000610cfd86828701610c5c565b935050602084013567ffffffffffffffff811115610d1e57610d1d610c36565b5b610d2a86828701610c80565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d70578082015181840152602081019050610d55565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d9882610d36565b610da28185610d41565b9350610db2818560208601610d52565b610dbb81610d7c565b840191505092915050565b60006020820190508181036000830152610de08184610d8d565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1382610de8565b9050919050565b610e2381610e08565b82525050565b6000602082019050610e3e6000830184610e1a565b92915050565b610e4d81610e08565b8114610e5857600080fd5b50565b600081359050610e6a81610e44565b92915050565b600080600080600060808688031215610e8c57610e8b610c31565b5b6000610e9a88828901610c5c565b9550506020610eab88828901610e5b565b9450506040610ebc88828901610e5b565b935050606086013567ffffffffffffffff811115610edd57610edc610c36565b5b610ee988828901610c80565b92509250509295509295909350565b610f0181610c3b565b82525050565b6000602082019050610f1c6000830184610ef8565b92915050565b600060208284031215610f3857610f37610c31565b5b6000610f4684828501610e5b565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b6000610fbc602983610f4f565b9150610fc782610f60565b604082019050919050565b60006020820190508181036000830152610feb81610faf565b9050919050565b600080fd5b600080fd5b600080858511156110105761100f610ff2565b5b8386111561102157611020610ff7565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b60006110878383611037565b826110928135611042565b925060048210156110d2576110cd7fffffffff000000000000000000000000000000000000000000000000000000008360040360080261106e565b831692505b505092915050565b82818337600083830152505050565b60006110f58385610d41565b93506111028385846110da565b61110b83610d7c565b840190509392505050565b600060408201905061112b6000830186610ef8565b818103602083015261113e8184866110e9565b9050949350505050565b600081905092915050565b600061115e82610d36565b6111688185611148565b9350611178818560208601610d52565b80840191505092915050565b60006111908284611153565b915081905092915050565b60006040820190506111b06000830185610e1a565b6111bd6020830184610e1a565b9392505050565b6000815190506111d381610c45565b92915050565b6000602082840312156111ef576111ee610c31565b5b60006111fd848285016111c4565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061123c602083610f4f565b915061124782611206565b602082019050919050565b6000602082019050818103600083015261126b8161122f565b9050919050565b60006060820190506112876000830186610e1a565b6112946020830185610e1a565b6112a16040830184610ef8565b949350505050565b60008115159050919050565b6112be816112a9565b81146112c957600080fd5b50565b6000815190506112db816112b5565b92915050565b6000602082840312156112f7576112f6610c31565b5b6000611305848285016112cc565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000611344600383610f4f565b915061134f8261130e565b602082019050919050565b6000602082019050818103600083015261137381611337565b9050919050565b600060408201905061138f6000830185610e1a565b61139c6020830184610ef8565b9392505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006113d9600283610f4f565b91506113e4826113a3565b602082019050919050565b60006020820190508181036000830152611408816113cc565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061146b602683610f4f565b91506114768261140f565b604082019050919050565b6000602082019050818103600083015261149a8161145e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006114d7601d83610f4f565b91506114e2826114a1565b602082019050919050565b60006020820190508181036000830152611506816114ca565b9050919050565b600081519050919050565b60006115238261150d565b61152d8185610f4f565b935061153d818560208601610d52565b61154681610d7c565b840191505092915050565b6000602082019050818103600083015261156b8184611518565b90509291505056fea264697066735822122012ba8e0bdc52f7f772d6df5be0f9a896366672723e6ec7a6b08dde4f4c20ddeb64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638e16caa31161004e5780638e16caa314610121578063ac3af20814610151578063e30c39781461017c578063f2fde38b146101a757610086565b8063715018a61461008b57806379ba5097146100a2578063882fbe36146100b95780638da5cb5b146100f657610086565b3661008657005b600080fd5b34801561009757600080fd5b506100a06101d0565b005b3480156100ae57600080fd5b506100b76101e4565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610cd6565b610271565b6040516100ed9190610dc6565b60405180910390f35b34801561010257600080fd5b5061010b61037d565b6040516101189190610e29565b60405180910390f35b61013b60048036038101906101369190610e70565b6103a6565b6040516101489190610f07565b60405180910390f35b34801561015d57600080fd5b50610166610541565b6040516101739190610e29565b60405180910390f35b34801561018857600080fd5b50610191610565565b60405161019e9190610e29565b60405180910390f35b3480156101b357600080fd5b506101ce60048036038101906101c99190610f22565b61058f565b005b6101d861063c565b6101e260006106ba565b565b60006101ee6106eb565b90508073ffffffffffffffffffffffffffffffffffffffff1661020f610565565b73ffffffffffffffffffffffffffffffffffffffff1614610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610fd2565b60405180910390fd5b61026e816106ba565b50565b60606000803073ffffffffffffffffffffffffffffffffffffffff16858560049080926102a093929190610ffc565b906102ab919061107b565b8787876040516024016102c093929190611116565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161032a9190611184565b6000604051808303816000865af19150503d8060008114610367576040519150601f19603f3d011682016040523d82523d6000602084013e61036c565b606091505b509150915080925050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006103b4853330896106f3565b858573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161041092919061119b565b602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906111d9565b10156104a3576104a2857f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61084b565b5b60006104b0878585610271565b90506000610534826040518060400160405280600981526020017f2163616c6c5377617000000000000000000000000000000000000000000000008152507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109a09092919063ffffffff16565b9050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059761063c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166105f761037d565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6106446106eb565b73ffffffffffffffffffffffffffffffffffffffff1661066261037d565b73ffffffffffffffffffffffffffffffffffffffff16146106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90611252565b60405180910390fd5b565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556106e8816109b8565b50565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161072a93929190611272565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107949190611184565b6000604051808303816000865af19150503d80600081146107d1576040519150601f19603f3d011682016040523d82523d6000602084013e6107d6565b606091505b5091509150818015610804575060008151148061080357508080602001905181019061080291906112e1565b5b5b610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a9061135a565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161088092919061137a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108ea9190611184565b6000604051808303816000865af19150503d8060008114610927576040519150601f19603f3d011682016040523d82523d6000602084013e61092c565b606091505b509150915081801561095a575060008151148061095957508080602001905181019061095891906112e1565b5b5b610999576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610990906113ef565b60405180910390fd5b5050505050565b60606109af8484600085610a7c565b90509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606082471015610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890611481565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610aea9190611184565b60006040518083038185875af1925050503d8060008114610b27576040519150601f19603f3d011682016040523d82523d6000602084013e610b2c565b606091505b5091509150610b3d87838387610b49565b92505050949350505050565b60608315610bab576000835103610ba357610b6385610bbe565b610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b99906114ed565b60405180910390fd5b5b829050610bb6565b610bb58383610be1565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610bf45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c289190611551565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b610c4e81610c3b565b8114610c5957600080fd5b50565b600081359050610c6b81610c45565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c9657610c95610c71565b5b8235905067ffffffffffffffff811115610cb357610cb2610c76565b5b602083019150836001820283011115610ccf57610cce610c7b565b5b9250929050565b600080600060408486031215610cef57610cee610c31565b5b6000610cfd86828701610c5c565b935050602084013567ffffffffffffffff811115610d1e57610d1d610c36565b5b610d2a86828701610c80565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d70578082015181840152602081019050610d55565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d9882610d36565b610da28185610d41565b9350610db2818560208601610d52565b610dbb81610d7c565b840191505092915050565b60006020820190508181036000830152610de08184610d8d565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1382610de8565b9050919050565b610e2381610e08565b82525050565b6000602082019050610e3e6000830184610e1a565b92915050565b610e4d81610e08565b8114610e5857600080fd5b50565b600081359050610e6a81610e44565b92915050565b600080600080600060808688031215610e8c57610e8b610c31565b5b6000610e9a88828901610c5c565b9550506020610eab88828901610e5b565b9450506040610ebc88828901610e5b565b935050606086013567ffffffffffffffff811115610edd57610edc610c36565b5b610ee988828901610c80565b92509250509295509295909350565b610f0181610c3b565b82525050565b6000602082019050610f1c6000830184610ef8565b92915050565b600060208284031215610f3857610f37610c31565b5b6000610f4684828501610e5b565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b6000610fbc602983610f4f565b9150610fc782610f60565b604082019050919050565b60006020820190508181036000830152610feb81610faf565b9050919050565b600080fd5b600080fd5b600080858511156110105761100f610ff2565b5b8386111561102157611020610ff7565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b60006110878383611037565b826110928135611042565b925060048210156110d2576110cd7fffffffff000000000000000000000000000000000000000000000000000000008360040360080261106e565b831692505b505092915050565b82818337600083830152505050565b60006110f58385610d41565b93506111028385846110da565b61110b83610d7c565b840190509392505050565b600060408201905061112b6000830186610ef8565b818103602083015261113e8184866110e9565b9050949350505050565b600081905092915050565b600061115e82610d36565b6111688185611148565b9350611178818560208601610d52565b80840191505092915050565b60006111908284611153565b915081905092915050565b60006040820190506111b06000830185610e1a565b6111bd6020830184610e1a565b9392505050565b6000815190506111d381610c45565b92915050565b6000602082840312156111ef576111ee610c31565b5b60006111fd848285016111c4565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061123c602083610f4f565b915061124782611206565b602082019050919050565b6000602082019050818103600083015261126b8161122f565b9050919050565b60006060820190506112876000830186610e1a565b6112946020830185610e1a565b6112a16040830184610ef8565b949350505050565b60008115159050919050565b6112be816112a9565b81146112c957600080fd5b50565b6000815190506112db816112b5565b92915050565b6000602082840312156112f7576112f6610c31565b5b6000611305848285016112cc565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000611344600383610f4f565b915061134f8261130e565b602082019050919050565b6000602082019050818103600083015261137381611337565b9050919050565b600060408201905061138f6000830185610e1a565b61139c6020830184610ef8565b9392505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006113d9600283610f4f565b91506113e4826113a3565b602082019050919050565b60006020820190508181036000830152611408816113cc565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061146b602683610f4f565b91506114768261140f565b604082019050919050565b6000602082019050818103600083015261149a8161145e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006114d7601d83610f4f565b91506114e2826114a1565b602082019050919050565b60006020820190508181036000830152611506816114ca565b9050919050565b600081519050919050565b60006115238261150d565b61152d8185610f4f565b935061153d818560208601610d52565b61154681610d7c565b840191505092915050565b6000602082019050818103600083015261156b8184611518565b90509291505056fea264697066735822122012ba8e0bdc52f7f772d6df5be0f9a896366672723e6ec7a6b08dde4f4c20ddeb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "callSwap(uint256,address,address,bytes)": {
        "details": "Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.",
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the 1inch aggregator router.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "title": "OneInchUniswapV3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callSwap(uint256,address,address,bytes)": {
        "notice": "Swap the given amount of tokens using 1inch."
      }
    },
    "notice": "Swapper contract for 1inch swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 368,
        "contract": "contracts/shared/Swap/OneInch/OneInchSwapAdapter.sol:OneInchSwapAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 481,
        "contract": "contracts/shared/Swap/OneInch/OneInchSwapAdapter.sol:OneInchSwapAdapter",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}