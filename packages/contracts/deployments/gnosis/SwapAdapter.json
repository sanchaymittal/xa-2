{
  "address": "0x86f6ACcDd46591b57835884Bc5484556bfD34E48",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "addSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedSwappers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "directSwapperCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "exactSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "removeSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc5aeb0c995fda6e42250b16d4e3a7a9049d0c6aedea050bf3abd7df06d50a404",
  "receipt": {
    "to": null,
    "from": "0xEab48A633Ada8565f2cdeB5cDE162909Fd64b749",
    "contractAddress": "0x86f6ACcDd46591b57835884Bc5484556bfD34E48",
    "transactionIndex": 4,
    "gasUsed": "1220557",
    "logsBloom": "0x
    "blockHash": "0xd86d9860a25dd3dd185b919d8223f669e8c13ec364864b8d23422f85d83dffca",
    "transactionHash": "0xc5aeb0c995fda6e42250b16d4e3a7a9049d0c6aedea050bf3abd7df06d50a404",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 27469786,
        "transactionHash": "0xc5aeb0c995fda6e42250b16d4e3a7a9049d0c6aedea050bf3abd7df06d50a404",
        "address": "0x86f6ACcDd46591b57835884Bc5484556bfD34E48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eab48a633ada8565f2cdeb5cde162909fd64b749"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xd86d9860a25dd3dd185b919d8223f669e8c13ec364864b8d23422f85d83dffca"
      }
    ],
    "blockNumber": 27469786,
    "cumulativeGasUsed": "2187125",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6188a0a22d3931c7365c57eb81aedc27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"addSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSwappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"directSwapperCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"exactSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"removeSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Connext\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to add.\"}},\"directSwapperCall(address,bytes)\":{\"params\":{\"_swapper\":\"Address of the swapper to use.\",\"swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router.\"}},\"exactSwap(address,uint256,address,address,bytes)\":{\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.\",\"_swapper\":\"Address of the swapper to use.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"title\":\"SwapAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSwapper(address)\":{\"notice\":\"Add a swapper to the list of allowed swappers.\"},\"directSwapperCall(address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed.\"},\"exactSwap(address,uint256,address,address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token.\"},\"removeSwapper(address)\":{\"notice\":\"Remove a swapper from the list of allowed swappers.\"}},\"notice\":\"This contract is used to provide a generic interface to swap tokens through a variety of different swap routers. It is used to swap tokens before proceeding with other actions. Swap router implementations can be added by owner. This is designed to be owned by the Connext DAO and swappers can be added by the DAO.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Swap/SwapAdapter.sol\":\"SwapAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/Swap/SwapAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {ISwapper} from \\\"./interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title SwapAdapter\\n * @author Connext\\n * @notice This contract is used to provide a generic interface to swap tokens through\\n * a variety of different swap routers. It is used to swap tokens\\n * before proceeding with other actions. Swap router implementations can be added by owner.\\n * This is designed to be owned by the Connext DAO and swappers can be added by the DAO.\\n */\\ncontract SwapAdapter is Ownable2Step {\\n  using Address for address;\\n  using Address for address payable;\\n\\n  mapping(address => bool) public allowedSwappers;\\n\\n  constructor() {\\n    allowedSwappers[address(this)] = true;\\n  }\\n\\n  /// Payable\\n  // @dev On the origin side, we can accept native assets for a swap.\\n  receive() external payable virtual {}\\n\\n  /// ADMIN\\n  /**\\n   * @notice Add a swapper to the list of allowed swappers.\\n   * @param _swapper Address of the swapper to add.\\n   */\\n  function addSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = true;\\n  }\\n\\n  /**\\n   * @notice Remove a swapper from the list of allowed swappers.\\n   * @param _swapper Address of the swapper to remove.\\n   */\\n  function removeSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = false;\\n  }\\n\\n  /// EXTERNAL\\n  /**\\n   * @notice Swap an exact amount of tokens for another token.\\n   * @param _swapper Address of the swapper to use.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the swapper. This data is encoded for a particular swap router, usually given\\n   * by an API. The swapper will decode the data and re-encode it with the new amountIn.\\n   */\\n  function exactSwap(\\n    address _swapper,\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData // comes directly from API with swap data encoded\\n  ) public payable returns (uint256 amountOut) {\\n    require(allowedSwappers[_swapper], \\\"!allowedSwapper\\\");\\n    if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\\n      TransferHelper.safeApprove(_fromAsset, _swapper, type(uint256).max);\\n    }\\n    amountOut = ISwapper(_swapper).callSwap(_amountIn, _fromAsset, _toAsset, _swapData);\\n  }\\n\\n  /**\\n   * @notice Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow\\n   * easy swaps on the source side where the amount does not need to be changed.\\n   * @param _swapper Address of the swapper to use.\\n   * @param swapData Data to pass to the swapper. This data is encoded for a particular swap router.\\n   */\\n  function directSwapperCall(address _swapper, bytes calldata swapData) public payable returns (uint256 amountOut) {\\n    bytes memory ret = _swapper.functionCallWithValue(swapData, msg.value, \\\"!directSwapperCallFailed\\\");\\n    amountOut = abi.decode(ret, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x1a26d5a0478356f9cb1888039405d490a5098650e1daa275831734b7193ebdad\",\"license\":\"MIT\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function callSwap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x112d3dad7dfbde660f12613f6407ee441c70e3cd43abe7909d91df4739000e5a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261008a60201b60201c565b61009260201b60201c565b6001600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061018d565b600033905090565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556100c6816100c960201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114358061019c6000396000f3fe6080604052600436106100955760003560e01c806399385006116100595780639938500614610160578063a0d7010214610189578063defc2248146101b9578063e30c3978146101e9578063f2fde38b146102145761009c565b80633f2d4131146100a1578063715018a6146100ca57806379ba5097146100e15780638da5cb5b146100f85780638ff1ed97146101235761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610c47565b61023d565b005b3480156100d657600080fd5b506100df6102a0565b005b3480156100ed57600080fd5b506100f66102b4565b005b34801561010457600080fd5b5061010d610341565b60405161011a9190610c83565b60405180910390f35b34801561012f57600080fd5b5061014a60048036038101906101459190610c47565b61036a565b6040516101579190610cb9565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610c47565b61038a565b005b6101a3600480360381019061019e9190610d39565b6103ed565b6040516101b09190610db2565b60405180910390f35b6101d360048036038101906101ce9190610df9565b6104b6565b6040516101e09190610db2565b60405180910390f35b3480156101f557600080fd5b506101fe610683565b60405161020b9190610c83565b60405180910390f35b34801561022057600080fd5b5061023b60048036038101906102369190610c47565b6106ad565b005b61024561075a565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6102a861075a565b6102b260006107d8565b565b60006102be610809565b90508073ffffffffffffffffffffffffffffffffffffffff166102df610683565b73ffffffffffffffffffffffffffffffffffffffff1614610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90610f16565b60405180910390fd5b61033e816107d8565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915054906101000a900460ff1681565b61039261075a565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008061049684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050346040518060400160405280601881526020017f216469726563745377617070657243616c6c4661696c656400000000000000008152508873ffffffffffffffffffffffffffffffffffffffff16610811909392919063ffffffff16565b9050808060200190518101906104ac9190610f4b565b9150509392505050565b6000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610fc4565b60405180910390fd5b858573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e308a6040518363ffffffff1660e01b8152600401610580929190610fe4565b602060405180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610f4b565b10156105f3576105f285887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6108de565b5b8673ffffffffffffffffffffffffffffffffffffffff16638e16caa387878787876040518663ffffffff1660e01b815260040161063495949392919061106b565b6020604051808303816000875af1158015610653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190610f4b565b90509695505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106b561075a565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610715610341565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610762610809565b73ffffffffffffffffffffffffffffffffffffffff16610780610341565b73ffffffffffffffffffffffffffffffffffffffff16146107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90611105565b60405180910390fd5b565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561080681610a33565b50565b600033905090565b606082471015610856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084d90611197565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161087f9190611228565b60006040518083038185875af1925050503d80600081146108bc576040519150601f19603f3d011682016040523d82523d6000602084013e6108c1565b606091505b50915091506108d287838387610af7565b92505050949350505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161091392919061123f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161097d9190611228565b6000604051808303816000865af19150503d80600081146109ba576040519150601f19603f3d011682016040523d82523d6000602084013e6109bf565b606091505b50915091508180156109ed57506000815114806109ec5750808060200190518101906109eb9190611294565b5b5b610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a239061130d565b60405180910390fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60608315610b59576000835103610b5157610b1185610b6c565b610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4790611379565b60405180910390fd5b5b829050610b64565b610b638383610b8f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610ba25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd691906113dd565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c1482610be9565b9050919050565b610c2481610c09565b8114610c2f57600080fd5b50565b600081359050610c4181610c1b565b92915050565b600060208284031215610c5d57610c5c610bdf565b5b6000610c6b84828501610c32565b91505092915050565b610c7d81610c09565b82525050565b6000602082019050610c986000830184610c74565b92915050565b60008115159050919050565b610cb381610c9e565b82525050565b6000602082019050610cce6000830184610caa565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cf957610cf8610cd4565b5b8235905067ffffffffffffffff811115610d1657610d15610cd9565b5b602083019150836001820283011115610d3257610d31610cde565b5b9250929050565b600080600060408486031215610d5257610d51610bdf565b5b6000610d6086828701610c32565b935050602084013567ffffffffffffffff811115610d8157610d80610be4565b5b610d8d86828701610ce3565b92509250509250925092565b6000819050919050565b610dac81610d99565b82525050565b6000602082019050610dc76000830184610da3565b92915050565b610dd681610d99565b8114610de157600080fd5b50565b600081359050610df381610dcd565b92915050565b60008060008060008060a08789031215610e1657610e15610bdf565b5b6000610e2489828a01610c32565b9650506020610e3589828a01610de4565b9550506040610e4689828a01610c32565b9450506060610e5789828a01610c32565b935050608087013567ffffffffffffffff811115610e7857610e77610be4565b5b610e8489828a01610ce3565b92509250509295509295509295565b600082825260208201905092915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b6000610f00602983610e93565b9150610f0b82610ea4565b604082019050919050565b60006020820190508181036000830152610f2f81610ef3565b9050919050565b600081519050610f4581610dcd565b92915050565b600060208284031215610f6157610f60610bdf565b5b6000610f6f84828501610f36565b91505092915050565b7f21616c6c6f776564537761707065720000000000000000000000000000000000600082015250565b6000610fae600f83610e93565b9150610fb982610f78565b602082019050919050565b60006020820190508181036000830152610fdd81610fa1565b9050919050565b6000604082019050610ff96000830185610c74565b6110066020830184610c74565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061104a838561100d565b935061105783858461101e565b6110608361102d565b840190509392505050565b60006080820190506110806000830188610da3565b61108d6020830187610c74565b61109a6040830186610c74565b81810360608301526110ad81848661103e565b90509695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110ef602083610e93565b91506110fa826110b9565b602082019050919050565b6000602082019050818103600083015261111e816110e2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611181602683610e93565b915061118c82611125565b604082019050919050565b600060208201905081810360008301526111b081611174565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156111eb5780820151818401526020810190506111d0565b60008484015250505050565b6000611202826111b7565b61120c81856111c2565b935061121c8185602086016111cd565b80840191505092915050565b600061123482846111f7565b915081905092915050565b60006040820190506112546000830185610c74565b6112616020830184610da3565b9392505050565b61127181610c9e565b811461127c57600080fd5b50565b60008151905061128e81611268565b92915050565b6000602082840312156112aa576112a9610bdf565b5b60006112b88482850161127f565b91505092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006112f7600283610e93565b9150611302826112c1565b602082019050919050565b60006020820190508181036000830152611326816112ea565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611363601d83610e93565b915061136e8261132d565b602082019050919050565b6000602082019050818103600083015261139281611356565b9050919050565b600081519050919050565b60006113af82611399565b6113b98185610e93565b93506113c98185602086016111cd565b6113d28161102d565b840191505092915050565b600060208201905081810360008301526113f781846113a4565b90509291505056fea26469706673582212201507c61dc35364a6dc398bd002efcb899869190b307574f5516ea37a0445a25864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c806399385006116100595780639938500614610160578063a0d7010214610189578063defc2248146101b9578063e30c3978146101e9578063f2fde38b146102145761009c565b80633f2d4131146100a1578063715018a6146100ca57806379ba5097146100e15780638da5cb5b146100f85780638ff1ed97146101235761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610c47565b61023d565b005b3480156100d657600080fd5b506100df6102a0565b005b3480156100ed57600080fd5b506100f66102b4565b005b34801561010457600080fd5b5061010d610341565b60405161011a9190610c83565b60405180910390f35b34801561012f57600080fd5b5061014a60048036038101906101459190610c47565b61036a565b6040516101579190610cb9565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610c47565b61038a565b005b6101a3600480360381019061019e9190610d39565b6103ed565b6040516101b09190610db2565b60405180910390f35b6101d360048036038101906101ce9190610df9565b6104b6565b6040516101e09190610db2565b60405180910390f35b3480156101f557600080fd5b506101fe610683565b60405161020b9190610c83565b60405180910390f35b34801561022057600080fd5b5061023b60048036038101906102369190610c47565b6106ad565b005b61024561075a565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6102a861075a565b6102b260006107d8565b565b60006102be610809565b90508073ffffffffffffffffffffffffffffffffffffffff166102df610683565b73ffffffffffffffffffffffffffffffffffffffff1614610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90610f16565b60405180910390fd5b61033e816107d8565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915054906101000a900460ff1681565b61039261075a565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008061049684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050346040518060400160405280601881526020017f216469726563745377617070657243616c6c4661696c656400000000000000008152508873ffffffffffffffffffffffffffffffffffffffff16610811909392919063ffffffff16565b9050808060200190518101906104ac9190610f4b565b9150509392505050565b6000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610fc4565b60405180910390fd5b858573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e308a6040518363ffffffff1660e01b8152600401610580929190610fe4565b602060405180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610f4b565b10156105f3576105f285887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6108de565b5b8673ffffffffffffffffffffffffffffffffffffffff16638e16caa387878787876040518663ffffffff1660e01b815260040161063495949392919061106b565b6020604051808303816000875af1158015610653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190610f4b565b90509695505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106b561075a565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610715610341565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610762610809565b73ffffffffffffffffffffffffffffffffffffffff16610780610341565b73ffffffffffffffffffffffffffffffffffffffff16146107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90611105565b60405180910390fd5b565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561080681610a33565b50565b600033905090565b606082471015610856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084d90611197565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161087f9190611228565b60006040518083038185875af1925050503d80600081146108bc576040519150601f19603f3d011682016040523d82523d6000602084013e6108c1565b606091505b50915091506108d287838387610af7565b92505050949350505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161091392919061123f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161097d9190611228565b6000604051808303816000865af19150503d80600081146109ba576040519150601f19603f3d011682016040523d82523d6000602084013e6109bf565b606091505b50915091508180156109ed57506000815114806109ec5750808060200190518101906109eb9190611294565b5b5b610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a239061130d565b60405180910390fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60608315610b59576000835103610b5157610b1185610b6c565b610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4790611379565b60405180910390fd5b5b829050610b64565b610b638383610b8f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610ba25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd691906113dd565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c1482610be9565b9050919050565b610c2481610c09565b8114610c2f57600080fd5b50565b600081359050610c4181610c1b565b92915050565b600060208284031215610c5d57610c5c610bdf565b5b6000610c6b84828501610c32565b91505092915050565b610c7d81610c09565b82525050565b6000602082019050610c986000830184610c74565b92915050565b60008115159050919050565b610cb381610c9e565b82525050565b6000602082019050610cce6000830184610caa565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cf957610cf8610cd4565b5b8235905067ffffffffffffffff811115610d1657610d15610cd9565b5b602083019150836001820283011115610d3257610d31610cde565b5b9250929050565b600080600060408486031215610d5257610d51610bdf565b5b6000610d6086828701610c32565b935050602084013567ffffffffffffffff811115610d8157610d80610be4565b5b610d8d86828701610ce3565b92509250509250925092565b6000819050919050565b610dac81610d99565b82525050565b6000602082019050610dc76000830184610da3565b92915050565b610dd681610d99565b8114610de157600080fd5b50565b600081359050610df381610dcd565b92915050565b60008060008060008060a08789031215610e1657610e15610bdf565b5b6000610e2489828a01610c32565b9650506020610e3589828a01610de4565b9550506040610e4689828a01610c32565b9450506060610e5789828a01610c32565b935050608087013567ffffffffffffffff811115610e7857610e77610be4565b5b610e8489828a01610ce3565b92509250509295509295509295565b600082825260208201905092915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b6000610f00602983610e93565b9150610f0b82610ea4565b604082019050919050565b60006020820190508181036000830152610f2f81610ef3565b9050919050565b600081519050610f4581610dcd565b92915050565b600060208284031215610f6157610f60610bdf565b5b6000610f6f84828501610f36565b91505092915050565b7f21616c6c6f776564537761707065720000000000000000000000000000000000600082015250565b6000610fae600f83610e93565b9150610fb982610f78565b602082019050919050565b60006020820190508181036000830152610fdd81610fa1565b9050919050565b6000604082019050610ff96000830185610c74565b6110066020830184610c74565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061104a838561100d565b935061105783858461101e565b6110608361102d565b840190509392505050565b60006080820190506110806000830188610da3565b61108d6020830187610c74565b61109a6040830186610c74565b81810360608301526110ad81848661103e565b90509695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110ef602083610e93565b91506110fa826110b9565b602082019050919050565b6000602082019050818103600083015261111e816110e2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611181602683610e93565b915061118c82611125565b604082019050919050565b600060208201905081810360008301526111b081611174565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156111eb5780820151818401526020810190506111d0565b60008484015250505050565b6000611202826111b7565b61120c81856111c2565b935061121c8185602086016111cd565b80840191505092915050565b600061123482846111f7565b915081905092915050565b60006040820190506112546000830185610c74565b6112616020830184610da3565b9392505050565b61127181610c9e565b811461127c57600080fd5b50565b60008151905061128e81611268565b92915050565b6000602082840312156112aa576112a9610bdf565b5b60006112b88482850161127f565b91505092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006112f7600283610e93565b9150611302826112c1565b602082019050919050565b60006020820190508181036000830152611326816112ea565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611363601d83610e93565b915061136e8261132d565b602082019050919050565b6000602082019050818103600083015261139281611356565b9050919050565b600081519050919050565b60006113af82611399565b6113b98185610e93565b93506113c98185602086016111cd565b6113d28161102d565b840191505092915050565b600060208201905081810360008301526113f781846113a4565b90509291505056fea26469706673582212201507c61dc35364a6dc398bd002efcb899869190b307574f5516ea37a0445a25864736f6c63430008130033",
  "devdoc": {
    "author": "Connext",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to add."
        }
      },
      "directSwapperCall(address,bytes)": {
        "params": {
          "_swapper": "Address of the swapper to use.",
          "swapData": "Data to pass to the swapper. This data is encoded for a particular swap router."
        }
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.",
          "_swapper": "Address of the swapper to use.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "title": "SwapAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSwapper(address)": {
        "notice": "Add a swapper to the list of allowed swappers."
      },
      "directSwapperCall(address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed."
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token."
      },
      "removeSwapper(address)": {
        "notice": "Remove a swapper from the list of allowed swappers."
      }
    },
    "notice": "This contract is used to provide a generic interface to swap tokens through a variety of different swap routers. It is used to swap tokens before proceeding with other actions. Swap router implementations can be added by owner. This is designed to be owned by the Connext DAO and swappers can be added by the DAO.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 368,
        "contract": "contracts/shared/Swap/SwapAdapter.sol:SwapAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 481,
        "contract": "contracts/shared/Swap/SwapAdapter.sol:SwapAdapter",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3127,
        "contract": "contracts/shared/Swap/SwapAdapter.sol:SwapAdapter",
        "label": "allowedSwappers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}