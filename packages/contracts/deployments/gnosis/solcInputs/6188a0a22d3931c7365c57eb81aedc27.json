{
  "language": "Solidity",
  "sources": {
    "@connext/interfaces/core/IConnext.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \"../libraries/LibConnextStorage.sol\";\nimport {TokenId} from \"../libraries/TokenId.sol\";\n\ninterface IConnext {\n\n  // ============ BRIDGE ==============\n\n  function xcall(\n    uint32 _destination,\n    address _to,\n    address _asset,\n    address _delegate,\n    uint256 _amount,\n    uint256 _slippage,\n    bytes calldata _callData\n  ) external payable returns (bytes32);\n\n  function xcall(\n    uint32 _destination,\n    address _to,\n    address _asset,\n    address _delegate,\n    uint256 _amount,\n    uint256 _slippage,\n    bytes calldata _callData,\n    uint256 _relayerFee\n  ) external returns (bytes32);\n\n  function xcallIntoLocal(\n    uint32 _destination,\n    address _to,\n    address _asset,\n    address _delegate,\n    uint256 _amount,\n    uint256 _slippage,\n    bytes calldata _callData\n  ) external payable returns (bytes32);\n\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\n\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\n\n  function forceReceiveLocal(TransferInfo calldata _params) external;\n\n  function bumpTransfer(bytes32 _transferId) external payable;\n\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\n\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\n\n  function remote(uint32 _domain) external view returns (address);\n\n  function domain() external view returns (uint256);\n\n  function nonce() external view returns (uint256);\n\n  function approvedSequencers(address _sequencer) external view returns (bool);\n\n  function xAppConnectionManager() external view returns (address);\n\n  // ============ ROUTERS ==============\n\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\n\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\n\n  function getRouterApproval(address _router) external view returns (bool);\n\n  function getRouterRecipient(address _router) external view returns (address);\n\n  function getRouterOwner(address _router) external view returns (address);\n\n  function getProposedRouterOwner(address _router) external view returns (address);\n\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\n\n  function maxRoutersPerTransfer() external view returns (uint256);\n\n  function routerBalances(address _router, address _asset) external view returns (uint256);\n\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\n\n  function initializeRouter(address _owner, address _recipient) external;\n\n  function setRouterRecipient(address _router, address _recipient) external;\n\n  function proposeRouterOwner(address _router, address _proposed) external;\n\n  function acceptProposedRouterOwner(address _router) external;\n\n  function addRouterLiquidityFor(\n    uint256 _amount,\n    address _local,\n    address _router\n  ) external payable;\n\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\n\n  function removeRouterLiquidityFor(\n    TokenId memory _canonical,\n    uint256 _amount,\n    address payable _to,\n    address _router\n  ) external;\n\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\n\n  // ============ TOKEN_FACET ==============\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\n\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\n}\n"
    },
    "@connext/interfaces/core/IXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IXReceiver {\n  function xReceive(\n    bytes32 _transferId,\n    uint256 _amount,\n    address _asset,\n    address _originSender,\n    uint32 _origin,\n    bytes memory _callData\n  ) external returns (bytes memory);\n}\n"
    },
    "@connext/interfaces/libraries/LibConnextStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/**\n * @notice Enum representing status of destination transfer\n * @dev Status is only assigned on the destination domain, will always be \"none\" for the\n * origin domains\n * @return uint - Index of value in enum\n */\nenum DestinationTransferStatus {\n  None, // 0\n  Reconciled, // 1\n  Executed, // 2\n  Completed // 3 - executed + reconciled\n}\n\n/**\n * @notice These are the parameters that will remain constant between the\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\n * @property to - The account that receives funds, in the event of a crosschain call,\n * will receive funds if the call fails.\n *\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\n * @param to - The address you are sending funds (and potentially data) to\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\n * a user takes 1% slippage, this is expressed as 1_000)\n * @param originSender - The msg.sender of the xcall\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\n */\nstruct TransferInfo {\n  uint32 originDomain;\n  uint32 destinationDomain;\n  uint32 canonicalDomain;\n  address to;\n  address delegate;\n  bool receiveLocal;\n  bytes callData;\n  uint256 slippage;\n  address originSender;\n  uint256 bridgedAmt;\n  uint256 normalizedIn;\n  uint256 nonce;\n  bytes32 canonicalId;\n}\n\n/**\n * @notice\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\n * @param routers - The routers who you are sending the funds on behalf of.\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\n * for the signed transfer ID.\n * @param sequencer - The sequencer who assigned the router path to this transfer.\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\n * for the path that was signed.\n */\nstruct ExecuteArgs {\n  TransferInfo params;\n  address[] routers;\n  bytes[] routerSignatures;\n  address sequencer;\n  bytes sequencerSignature;\n}"
    },
    "@connext/interfaces/libraries/TokenId.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.0;\n\n// ============= Structs =============\n\n// Tokens are identified by a TokenId:\n// domain - 4 byte chain ID of the chain from which the token originates\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\nstruct TokenId {\n  uint32 domain;\n  bytes32 id;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/destination/xreceivers/AuthForwarderXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IConnext} from \"@connext/interfaces/core/IConnext.sol\";\nimport {IXReceiver} from \"@connext/interfaces/core/IXReceiver.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract AuthForwarderXReceiver is IXReceiver, Ownable {\n  struct OriginInfo {\n    address originConnext;\n    address originSender;\n  }\n\n  /// The Connext contract on this domain\n  IConnext public immutable connext;\n\n  /// Allowed origin domains\n  uint32[] public originDomains;\n\n  /// Registry of senders and Connext contracts of allowed origin domains\n  mapping(uint32 => OriginInfo) public originRegistry;\n\n  /// EVENTS\n  event ForwardedFunctionCallFailed(bytes32 _transferId);\n  event ForwardedFunctionCallFailed(bytes32 _transferId, string _errorMessage);\n  event ForwardedFunctionCallFailed(bytes32 _transferId, uint _errorCode);\n  event ForwardedFunctionCallFailed(bytes32 _transferId, bytes _lowLevelData);\n\n  /// ERRORS\n  error ForwarderXReceiver__onlyOrigin(address originSender, uint32 origin, address sender);\n  error ForwarderXReceiver__prepareAndForward_notThis(address sender);\n\n  /// MODIFIERS\n  /** @notice A modifier for authenticated calls.\n   * This is an important security consideration. If the target contract\n   * function should be authenticated, it must check three things:\n   *    1) The originating call comes from the expected origin domain.\n   *    2) The originating call comes from the expected origin contract.\n   *    3) The call to this contract comes from Connext.\n   */\n  modifier onlyOrigin(address _originSender, uint32 _origin) {\n    OriginInfo memory info = originRegistry[_origin];\n    if (msg.sender != address(connext) || _originSender != info.originSender || msg.sender != info.originConnext) {\n      revert ForwarderXReceiver__onlyOrigin(_originSender, _origin, msg.sender);\n    }\n    _;\n  }\n\n  /**\n   * @dev The elements in the _origin* array params must be passed in the same relative positions.\n   * @param _connext - The address of the Connext contract on this domain\n   * @param _originDomains - Array of origin domains to be registered in the OriginRegistry\n   * @param _originConnexts - Array of Connext contracts on origin domains\n   * @param _originSenders - Array of senders on origin domains that are expected to call this contract\n   */\n  constructor(\n    address _connext,\n    uint32[] memory _originDomains,\n    address[] memory _originConnexts,\n    address[] memory _originSenders\n  ) {\n    require(\n      _originDomains.length == _originConnexts.length && _originDomains.length == _originSenders.length,\n      \"Lengths of origin params must match\"\n    );\n\n    connext = IConnext(_connext);\n\n    for (uint32 i = 0; i < _originConnexts.length; i++) {\n      originDomains.push(_originDomains[i]);\n      originRegistry[_originDomains[i]] = OriginInfo(_originConnexts[i], _originSenders[i]);\n    }\n  }\n\n  /**\n   * @dev Add an origin domain to the originRegistry.\n   * @param _originDomain - Origin domain to be registered in the OriginRegistry\n   * @param _originConnext - Connext contract on origin domain\n   * @param _originSender - Sender on origin domain that is expected to call this contract\n   */\n  function addOrigin(uint32 _originDomain, address _originConnext, address _originSender) public onlyOwner {\n    originDomains.push(_originDomain);\n    originRegistry[_originDomain] = OriginInfo(_originConnext, _originSender);\n  }\n\n  /**\n   * @dev Remove an origin domain from the originRegistry.\n   * @param _originDomain - Origin domain to be removed from the OriginRegistry\n   */\n  function removeOrigin(uint32 _originDomain) public onlyOwner {\n    // Assign an out-of-bounds index by default\n    uint32 indexToRemove = uint32(originDomains.length);\n    for (uint32 i = 0; i < originDomains.length; i++) {\n      if (originDomains[i] == _originDomain) {\n        indexToRemove = i;\n        break;\n      }\n    }\n\n    require(indexToRemove < originDomains.length, \"Origin domain not found\");\n\n    // Constant operation to remove origin since we don't need to preserve order\n    originDomains[indexToRemove] = originDomains[originDomains.length - 1];\n    originDomains.pop();\n\n    delete originRegistry[_originDomain];\n  }\n\n  /**\n   * @notice Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer.\n   * @dev _originSender and _origin are passed into the onlyOrigin modifier to turn this into an \"authenticated\" call. This function\n   * will fail until the AMB's validation window has elapsed, at which point _orginSender changes from the zero address to the correct\n   * sender address from the origin domain.\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   * @param _callData - The data to be prepared and forwarded\n   */\n  function xReceive(\n    bytes32 _transferId,\n    uint256 _amount, // Final Amount receive via Connext(After AMM calculation)\n    address _asset,\n    address _originSender,\n    uint32 _origin,\n    bytes memory _callData\n  ) external onlyOrigin(_originSender, _origin) returns (bytes memory) {\n    // Decode calldata\n    (address _fallbackAddress, bytes memory _data) = abi.decode(_callData, (address, bytes));\n\n    bool successfulForward;\n    try this.prepareAndForward(_transferId, _data, _amount, _asset) returns (bool success) {\n      successfulForward = success;\n      if (!success) {\n        emit ForwardedFunctionCallFailed(_transferId);\n      }\n      // transfer to fallback address if forwardFunctionCall fails\n    } catch Error(string memory _errorMessage) {\n      // This is executed in case\n      // revert was called with a reason string\n      successfulForward = false;\n      emit ForwardedFunctionCallFailed(_transferId, _errorMessage);\n    } catch Panic(uint _errorCode) {\n      // This is executed in case of a panic,\n      // i.e. a serious error like division by zero\n      // or overflow. The error code can be used\n      // to determine the kind of error.\n      successfulForward = false;\n      emit ForwardedFunctionCallFailed(_transferId, _errorCode);\n    } catch (bytes memory _lowLevelData) {\n      // This is executed in case revert() was used.\n      successfulForward = false;\n      emit ForwardedFunctionCallFailed(_transferId, _lowLevelData);\n    }\n    if (!successfulForward) {\n      IERC20(_asset).transfer(_fallbackAddress, _amount);\n    }\n    // Return the success status of the forwardFunctionCall\n    return abi.encode(successfulForward);\n  }\n\n  /// INTERNAL\n  /**\n   * @notice Prepares the data for the function call and forwards it. This can execute\n   * any arbitrary function call in a two step process. For example, _prepare can be used to swap funds\n   * on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds.\n   * @dev This function is intended to be called by the xReceive function, and should not be called outside\n   * of that context. The function is `public` so that it can be used with try-catch.\n   *\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _data - The data to be prepared\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   */\n  function prepareAndForward(\n    bytes32 _transferId,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) public returns (bool) {\n    if (msg.sender != address(this)) {\n      revert ForwarderXReceiver__prepareAndForward_notThis(msg.sender);\n    }\n    // Prepare for forwarding\n    bytes memory _prepared = _prepare(_transferId, _data, _amount, _asset);\n    // Forward the function call\n    return _forwardFunctionCall(_prepared, _transferId, _amount, _asset);\n  }\n\n  /// INTERNAL ABSTRACT\n  /**\n   * @notice Prepares the data for the function call. This can execute any arbitrary function call in a two step process.\n   * For example, _prepare can be used to swap funds on a DEX, or do any other type of preparation, and pass on the\n   * prepared data to _forwardFunctionCall.\n   * @dev This function needs to be overriden in implementations of this contract. If no preparation is needed, this\n   * function can be overriden to return the data as is.\n   *\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _data - The data to be prepared\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   */\n  function _prepare(\n    bytes32 _transferId,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) internal virtual returns (bytes memory) {\n    return abi.encode(_data, _transferId, _amount, _asset);\n  }\n\n  /**\n   * @notice Forwards the function call. This can execute any arbitrary function call in a two step process.\n   * The first step is to prepare the data, and the second step is to forward the function call to a\n   * given contract.\n   * @dev This function needs to be overriden in implementations of this contract.\n   *\n   * @param _preparedData - The data to be forwarded, after processing in _prepare\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   */\n  function _forwardFunctionCall(\n    bytes memory _preparedData,\n    bytes32 _transferId,\n    uint256 _amount,\n    address _asset\n  ) internal virtual returns (bool) {}\n}\n"
    },
    "contracts/destination/xreceivers/ForwarderXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IConnext} from \"@connext/interfaces/core/IConnext.sol\";\nimport {IXReceiver} from \"@connext/interfaces/core/IXReceiver.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title ForwarderXReceiver\n * @author Connext\n * @notice Abstract contract to allow for forwarding a call. Handles security and error handling.\n * @dev This is meant to be used in unauthenticated flows, so the data passed in is not guaranteed to be correct.\n * This is meant to be used when there are funds passed into the contract that need to be forwarded to another contract.\n */\nabstract contract ForwarderXReceiver is IXReceiver {\n  // The Connext contract on this domain\n  IConnext public immutable connext;\n\n  /// EVENTS\n  event ForwardedFunctionCallFailed(bytes32 _transferId);\n  event ForwardedFunctionCallFailed(bytes32 _transferId, string _errorMessage);\n  event ForwardedFunctionCallFailed(bytes32 _transferId, uint _errorCode);\n  event ForwardedFunctionCallFailed(bytes32 _transferId, bytes _lowLevelData);\n\n  /// ERRORS\n  error ForwarderXReceiver__onlyConnext(address sender);\n  error ForwarderXReceiver__prepareAndForward_notThis(address sender);\n\n  /// MODIFIERS\n  modifier onlyConnext() {\n    if (msg.sender != address(connext)) {\n      revert ForwarderXReceiver__onlyConnext(msg.sender);\n    }\n    _;\n  }\n\n  /**\n   * @param _connext - The address of the Connext contract on this domain\n   */\n  constructor(address _connext) {\n    connext = IConnext(_connext);\n  }\n\n  /**\n   * @notice Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer.\n   * @dev _originSender and _origin are not used in this implementation because this is meant for an \"unauthenticated\" call. This means\n   * any router can call this function and no guarantees are made on the data passed in. This should only be used when there are\n   * funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no\n   * reason to call this function maliciously, because the router would be spending their own funds.\n   * @param _transferId - The transfer ID of the transfer that triggered this call.\n   * @param _amount - The amount of funds received in this transfer.\n   * @param _asset - The asset of the funds received in this transfer.\n   * @param _callData - The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.\n   */\n  function xReceive(\n    bytes32 _transferId,\n    uint256 _amount, // Final Amount receive via Connext(After AMM calculation)\n    address _asset,\n    address /*_originSender*/,\n    uint32 /*_origin*/,\n    bytes calldata _callData\n  ) external onlyConnext returns (bytes memory) {\n    // Decode calldata\n    (address _fallbackAddress, bytes memory _data) = abi.decode(_callData, (address, bytes));\n\n    bool successfulForward;\n    try this.prepareAndForward(_transferId, _data, _amount, _asset) returns (bool success) {\n      successfulForward = success;\n      if (!success) {\n        emit ForwardedFunctionCallFailed(_transferId);\n      }\n      // transfer to fallback address if forwardFunctionCall fails\n    } catch Error(string memory _errorMessage) {\n      // This is executed in case\n      // revert was called with a reason string\n      successfulForward = false;\n      emit ForwardedFunctionCallFailed(_transferId, _errorMessage);\n    } catch Panic(uint _errorCode) {\n      // This is executed in case of a panic,\n      // i.e. a serious error like division by zero\n      // or overflow. The error code can be used\n      // to determine the kind of error.\n      successfulForward = false;\n      emit ForwardedFunctionCallFailed(_transferId, _errorCode);\n    } catch (bytes memory _lowLevelData) {\n      // This is executed in case revert() was used.\n      successfulForward = false;\n      emit ForwardedFunctionCallFailed(_transferId, _lowLevelData);\n    }\n    if (!successfulForward) {\n      IERC20(_asset).transfer(_fallbackAddress, _amount);\n    }\n    // Return the success status of the forwardFunctionCall\n    return abi.encode(successfulForward);\n  }\n\n  /// INTERNAL\n  /**\n   * @notice Prepares the data for the function call and forwards it. This can execute\n   * any arbitrary function call in a two step process. For example, _prepare can be used to swap funds\n   * on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds.\n   * @dev This function is intended to be called by the xReceive function, and should not be called outside\n   * of that context. The function is `public` so that it can be used with try-catch.\n   *\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _data - The data to be prepared\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   */\n  function prepareAndForward(\n    bytes32 _transferId,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) public returns (bool) {\n    if (msg.sender != address(this)) {\n      revert ForwarderXReceiver__prepareAndForward_notThis(msg.sender);\n    }\n    // Prepare for forwarding\n    bytes memory _prepared = _prepare(_transferId, _data, _amount, _asset);\n    // Forward the function call\n    return _forwardFunctionCall(_prepared, _transferId, _amount, _asset);\n  }\n\n  /// INTERNAL ABSTRACT\n  /**\n   * @notice Prepares the data for the function call. This can execute any arbitrary function call in a two step process.\n   * For example, _prepare can be used to swap funds on a DEX, or do any other type of preparation, and pass on the\n   * prepared data to _forwardFunctionCall.\n   * @dev This function needs to be overriden in implementations of this contract. If no preparation is needed, this\n   * function can be overriden to return the data as is.\n   *\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _data - The data to be prepared\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   */\n  function _prepare(\n    bytes32 _transferId,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) internal virtual returns (bytes memory) {\n    return abi.encode(_data, _transferId, _amount, _asset);\n  }\n\n  /**\n   * @notice Forwards the function call. This can execute any arbitrary function call in a two step process.\n   * The first step is to prepare the data, and the second step is to forward the function call to a\n   * given contract.\n   * @dev This function needs to be overriden in implementations of this contract.\n   *\n   * @param _preparedData - The data to be forwarded, after processing in _prepare\n   * @param _transferId - The transfer ID of the transfer that triggered this call\n   * @param _amount - The amount of funds received in this transfer\n   * @param _asset - The asset of the funds received in this transfer\n   */\n  function _forwardFunctionCall(\n    bytes memory _preparedData,\n    bytes32 _transferId,\n    uint256 _amount,\n    address _asset\n  ) internal virtual returns (bool) {}\n}\n"
    },
    "contracts/destination/xreceivers/Swap/SwapForwarderXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport {TransferHelper} from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {ForwarderXReceiver} from \"../ForwarderXReceiver.sol\";\nimport {SwapAdapter} from \"../../../shared/Swap/SwapAdapter.sol\";\n\n/**\n * @title SwapForwarderXReceiver\n * @author Connext\n * @notice Abstract contract to allow for swapping tokens before forwarding a call.\n */\nabstract contract SwapForwarderXReceiver is ForwarderXReceiver, SwapAdapter {\n  using Address for address;\n\n  /// @dev The address of the Connext contract on this domain.\n  constructor(address _connext) ForwarderXReceiver(_connext) {}\n\n  /// INTERNAL\n  /**\n   * @notice Prepare the data by calling to the swap adapter. Return the data to be swapped.\n   * @dev This is called by the xReceive function so the input data is provided by the Connext bridge.\n   * @param _transferId The transferId of the transfer.\n   * @param _data The data to be swapped.\n   * @param _amount The amount to be swapped.\n   * @param _asset The incoming asset to be swapped.\n   */\n  function _prepare(\n    bytes32 _transferId,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) internal override returns (bytes memory) {\n    (address _swapper, address _toAsset, bytes memory _swapData, bytes memory _forwardCallData) = abi.decode(\n      _data,\n      (address, address, bytes, bytes)\n    );\n\n    uint256 _amountOut = this.exactSwap(_swapper, _amount, _asset, _toAsset, _swapData);\n\n    return abi.encode(_forwardCallData, _amountOut, _asset, _toAsset, _transferId);\n  }\n}\n"
    },
    "contracts/destination/xreceivers/Uniswap/UniswapV2ForwarderXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport {TransferHelper} from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nimport {ForwarderXReceiver} from \"../ForwarderXReceiver.sol\";\n\nabstract contract UniswapV2ForwarderXReceiver is ForwarderXReceiver {\n  IUniswapV2Router02 public immutable uniswapSwapRouter;\n\n  constructor(address _connext, address _uniswapSwapRouter) ForwarderXReceiver(_connext) {\n    uniswapSwapRouter = IUniswapV2Router02(_uniswapSwapRouter);\n  }\n\n  /// INTERNAL\n  function _prepare(\n    bytes32 /*_transferId*/,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) internal override returns (bytes memory) {\n    (address toAsset, uint256 amountOutMin, bytes memory forwardCallData) = abi.decode(\n      _data,\n      (address, uint256, bytes)\n    );\n\n    uint[] memory amounts = new uint[](1);\n    amounts[0] = _amount;\n    address[] memory path = new address[](2);\n    path[0] = _asset;\n    path[1] = toAsset;\n    if (_asset != toAsset) {\n      TransferHelper.safeApprove(_asset, address(uniswapSwapRouter), _amount);\n      amounts = uniswapSwapRouter.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp);\n    }\n\n    return abi.encode(amounts, toAsset, path, amountOutMin, forwardCallData);\n  }\n}\n"
    },
    "contracts/destination/xreceivers/Uniswap/UniswapV3ForwarderXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport {TransferHelper} from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nimport {ForwarderXReceiver} from \"../ForwarderXReceiver.sol\";\n\nabstract contract UniswapV3ForwarderXReceiver is ForwarderXReceiver {\n  ISwapRouter public immutable uniswapSwapRouter;\n\n  constructor(address _connext, address _uniswapSwapRouter) ForwarderXReceiver(_connext) {\n    uniswapSwapRouter = ISwapRouter(_uniswapSwapRouter);\n  }\n\n  /// INTERNAL\n  function _prepare(\n    bytes32 /*_transferId*/,\n    bytes memory _data,\n    uint256 _amount,\n    address _asset\n  ) internal override returns (bytes memory) {\n    (address toAsset, uint24 poolFee, uint256 amountOutMin, bytes memory forwardCallData) = abi.decode(\n      _data,\n      (address, uint24, uint256, bytes)\n    );\n\n    uint256 amountOut = _amount;\n    if (_asset != toAsset) {\n      TransferHelper.safeApprove(_asset, address(uniswapSwapRouter), _amount);\n      // Set up uniswap swap params.\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n        tokenIn: _asset,\n        tokenOut: toAsset,\n        fee: poolFee,\n        recipient: address(this),\n        deadline: block.timestamp,\n        amountIn: _amount,\n        amountOutMinimum: amountOutMin,\n        sqrtPriceLimitX96: 0\n      });\n\n      // The call to `exactInputSingle` executes the swap.\n      amountOut = ISwapRouter(uniswapSwapRouter).exactInputSingle(params);\n    }\n\n    return\n      abi.encode(\n        amountOut, // received from swap\n        // params for the swap\n        toAsset,\n        poolFee,\n        amountOutMin,\n        // params for next call\n        forwardCallData\n      );\n  }\n}\n"
    },
    "contracts/origin/SwapAndXCall.sol": {
      "content": "// // SPDX-License-Identifier: Unlicense\n// pragma solidity ^0.8.17;\n\n// import {TransferHelper} from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// import {IConnext} from \"@connext/interfaces/core/IConnext.sol\";\n// import {SwapAdapter} from \"../../shared/Swap/SwapAdapter.sol\";\n\n// contract SwapAndXCall is SwapAdapter {\n//   // Connext address on this domain\n//   IConnext connext;\n\n//   constructor(address _connext) SwapAdapter() {\n//     connext = IConnext(_connext);\n//   }\n\n//   // EXTERNAL FUNCTIONS\n//   /**\n//    * @notice Calls a swapper contract and then calls xcall on connext\n//    * @dev Data for the swap is generated offchain to call to the appropriate swapper contract\n//    * Function is payable since it uses the relayer fee in native asset\n//    * @param _fromAsset Address of the asset to swap from\n//    * @param _toAsset Address of the asset to swap to\n//    * @param _amountIn Amount of the asset to swap from\n//    * @param _swapper Address of the swapper contract\n//    * @param _swapData Data to call the swapper contract with\n//    * @param _destination Destination of the xcall\n//    * @param _to Address to send the asset and call with the calldata on the destination\n//    * @param _delegate Delegate address\n//    * @param _slippage Total slippage amount accepted\n//    * @param _callData Calldata to call the destination with\n//    */\n//   function swapAndXCall(\n//     address _fromAsset,\n//     address _toAsset,\n//     uint256 _amountIn,\n//     address _swapper,\n//     bytes calldata _swapData,\n//     uint32 _destination,\n//     address _to,\n//     address _delegate,\n//     uint256 _slippage,\n//     bytes calldata _callData\n//   ) external payable {\n//     uint256 amountOut = _setupAndSwap(_fromAsset, _toAsset, _amountIn, _swapper, _swapData);\n\n//     connext.xcall{value: msg.value - _amountIn}(\n//       _destination,\n//       _to,\n//       _toAsset,\n//       _delegate,\n//       amountOut,\n//       _slippage,\n//       _callData\n//     );\n//   }\n\n//   /**\n//    * @notice Calls a swapper contract and then calls xcall on connext\n//    * @dev Data for the swap is generated offchain to call to the appropriate swapper contract\n//    * Pays relayer fee from the input asset\n//    * @param _fromAsset Address of the asset to swap from\n//    * @param _toAsset Address of the asset to swap to\n//    * @param _amountIn Amount of the asset to swap from\n//    * @param _swapper Address of the swapper contract\n//    * @param _swapData Data to call the swapper contract with\n//    * @param _destination Destination of the xcall\n//    * @param _to Address to send the asset and call with the calldata on the destination\n//    * @param _delegate Delegate address\n//    * @param _slippage Total slippage amount accepted\n//    * @param _callData Calldata to call the destination with\n//    * @param _relayerFee Relayer fee to pay in the input asset\n//    */\n//   function swapAndXCall(\n//     address _fromAsset,\n//     address _toAsset,\n//     uint256 _amountIn,\n//     address _swapper,\n//     bytes calldata _swapData,\n//     uint32 _destination,\n//     address _to,\n//     address _delegate,\n//     uint256 _slippage,\n//     bytes calldata _callData,\n//     uint256 _relayerFee\n//   ) external payable {\n//     uint256 amountOut = _setupAndSwap(_fromAsset, _toAsset, _amountIn, _swapper, _swapData);\n\n//     connext.xcall(_destination, _to, _toAsset, _delegate, amountOut - _relayerFee, _slippage, _callData, _relayerFee);\n//   }\n\n//   // INTERNAL FUNCTIONS\n\n//   /**\n//    * @notice Sets up the swap and returns the amount out\n//    * @dev Handles approvals to the connext contract and the swapper contract\n//    * @param _fromAsset Address of the asset to swap from\n//    * @param _toAsset Address of the asset to swap to\n//    * @param _amountIn Amount of the asset to swap from\n//    * @param _swapper Address of the swapper contract\n//    * @param _swapData Data to call the swapper contract with\n//    * @return amountOut Amount of the asset after swap\n//    */\n//   function _setupAndSwap(\n//     address _fromAsset,\n//     address _toAsset,\n//     uint256 _amountIn,\n//     address _swapper,\n//     bytes calldata _swapData\n//   ) internal returns (uint256 amountOut) {\n//     if (_fromAsset != address(0)) {\n//       TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\n//     } else {\n//       require(msg.value >= _amountIn, \"SwapAndXCall: msg.value != _amountIn\");\n//     }\n\n//     if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\n//       IERC20(_fromAsset).approve(_swapper, type(uint256).max);\n//     }\n//     amountOut = this.directSwapperCall{value: _fromAsset == address(0) ? _amountIn : 0}(_swapper, _swapData);\n\n//     if (IERC20(_toAsset).allowance(address(this), address(connext)) < _amountIn) {\n//       IERC20(_toAsset).approve(address(connext), type(uint256).max);\n//     }\n//   }\n// }\n"
    },
    "contracts/shared/Swap/interfaces/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\ninterface ISwapper {\n  function callSwap(\n    uint256 _amountIn,\n    address _tokenIn,\n    address _tokenOut,\n    bytes calldata _swapData\n  ) external payable returns (uint256 amountOut);\n}\n"
    },
    "contracts/shared/Swap/OneInch/OneInchSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport {TransferHelper} from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {ISwapper} from \"../interfaces/ISwapper.sol\";\n\n/**\n * @title OneInchUniswapV3\n * @notice Swapper contract for 1inch swaps.\n */\ncontract OneInchSwapAdapter is ISwapper, Ownable2Step {\n  using Address for address;\n  using Address for address payable;\n\n  address public immutable oneInchRouter = address(0x1111111254EEB25477B68fb85Ed929f73A960582);\n\n  receive() external payable virtual {}\n\n  struct SwapDescription {\n    address srcToken;\n    address dstToken;\n    address srcReceiver;\n    address dstReceiver;\n    uint256 amount;\n    uint256 minReturnAmount;\n    uint256 flags;\n  }\n\n  /**\n   * @notice Swap the given amount of tokens using 1inch.\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\n   * until the funds are transferred to this contract.\n   * @param _amountIn Amount of tokens to swap.\n   * @param _fromAsset Address of the token to swap from.\n   * @param _toAsset Address of the token to swap to.\n   * @param _swapData Data to pass to the 1inch aggregator router.\n   */\n  function callSwap(\n    uint256 _amountIn,\n    address _fromAsset,\n    address _toAsset,\n    bytes calldata _swapData // from 1inch API\n  ) public payable returns (uint256 amountOut) {\n    // transfer the funds to be swapped from the sender into this contract\n    TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\n\n    if (IERC20(_fromAsset).allowance(address(this), address(oneInchRouter)) < _amountIn) {\n      TransferHelper.safeApprove(_fromAsset, address(oneInchRouter), type(uint256).max);\n    }\n\n    // decode & encode the swap data\n    // the data included with the swap encodes with the selector so we need to remove it\n    // https://docs.1inch.io/docs/aggregation-protocol/smart-contract/UnoswapV3Router#uniswapv3swap\n    bytes memory _data = decoderEncoderSwapAmount(_amountIn, _swapData);\n\n    // Set up swap params\n    // Approve the swapper if needed\n\n    // The call to `uniswapV3Swap` executes the swap.\n    // use actual amountIn that was sent to the xReceiver\n    bytes memory returned = address(oneInchRouter).functionCall(_data, \"!callSwap\");\n\n    // (uint256 _a, uint256 _g) = abi.decode(returned, (uint256, uint256));\n    // amountOut = _a;\n    // transfer the swapped funds back to the sender\n    // TransferHelper.safeTransfer(_toAsset, msg.sender, amountOut);\n  }\n\n  function decoderEncoderSwapAmount(uint256 _amount, bytes calldata _swapData) public returns (bytes memory) {\n    // Decode and Encode the swap data with new amountIn\n    (bool success, bytes memory data) = address(this).call(\n      abi.encodeWithSelector(bytes4(_swapData[4:]), _amount, _swapData)\n    );\n\n    return data;\n  }\n\n  function swap(uint256 _amount, bytes calldata _swapData) internal pure returns (bytes memory) {\n    // decode the swap data\n    (address executor, SwapDescription memory desc, bytes memory permit, bytes memory _d) = abi.decode(\n      _swapData[4:],\n      (address, SwapDescription, bytes, bytes)\n    );\n\n    desc.amount = _amount;\n\n    bytes memory encoded = abi.encodeWithSelector(bytes4(_swapData[4:]), executor, desc, permit, _d);\n    return encoded;\n  }\n\n  function uniswapV3Swap(uint256 _amount, bytes calldata _swapData) internal pure returns (bytes memory) {\n    // decode the swap data\n    (uint256 amount, uint256 minReturn, uint256[] memory pools) = abi.decode(\n      _swapData[4:],\n      (uint256, uint256, uint256[])\n    );\n\n    // encode the swap data\n    bytes memory encoded = abi.encodeWithSelector(bytes4(_swapData[4:]), _amount, minReturn, pools);\n    return encoded;\n  }\n}\n"
    },
    "contracts/shared/Swap/SwapAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.7 <0.9.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {TransferHelper} from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nimport {ISwapper} from \"./interfaces/ISwapper.sol\";\n\n/**\n * @title SwapAdapter\n * @author Connext\n * @notice This contract is used to provide a generic interface to swap tokens through\n * a variety of different swap routers. It is used to swap tokens\n * before proceeding with other actions. Swap router implementations can be added by owner.\n * This is designed to be owned by the Connext DAO and swappers can be added by the DAO.\n */\ncontract SwapAdapter is Ownable2Step {\n  using Address for address;\n  using Address for address payable;\n\n  mapping(address => bool) public allowedSwappers;\n\n  constructor() {\n    allowedSwappers[address(this)] = true;\n  }\n\n  /// Payable\n  // @dev On the origin side, we can accept native assets for a swap.\n  receive() external payable virtual {}\n\n  /// ADMIN\n  /**\n   * @notice Add a swapper to the list of allowed swappers.\n   * @param _swapper Address of the swapper to add.\n   */\n  function addSwapper(address _swapper) external onlyOwner {\n    allowedSwappers[_swapper] = true;\n  }\n\n  /**\n   * @notice Remove a swapper from the list of allowed swappers.\n   * @param _swapper Address of the swapper to remove.\n   */\n  function removeSwapper(address _swapper) external onlyOwner {\n    allowedSwappers[_swapper] = false;\n  }\n\n  /// EXTERNAL\n  /**\n   * @notice Swap an exact amount of tokens for another token.\n   * @param _swapper Address of the swapper to use.\n   * @param _amountIn Amount of tokens to swap.\n   * @param _fromAsset Address of the token to swap from.\n   * @param _toAsset Address of the token to swap to.\n   * @param _swapData Data to pass to the swapper. This data is encoded for a particular swap router, usually given\n   * by an API. The swapper will decode the data and re-encode it with the new amountIn.\n   */\n  function exactSwap(\n    address _swapper,\n    uint256 _amountIn,\n    address _fromAsset,\n    address _toAsset,\n    bytes calldata _swapData // comes directly from API with swap data encoded\n  ) public payable returns (uint256 amountOut) {\n    require(allowedSwappers[_swapper], \"!allowedSwapper\");\n    if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\n      TransferHelper.safeApprove(_fromAsset, _swapper, type(uint256).max);\n    }\n    amountOut = ISwapper(_swapper).callSwap(_amountIn, _fromAsset, _toAsset, _swapData);\n  }\n\n  /**\n   * @notice Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow\n   * easy swaps on the source side where the amount does not need to be changed.\n   * @param _swapper Address of the swapper to use.\n   * @param swapData Data to pass to the swapper. This data is encoded for a particular swap router.\n   */\n  function directSwapperCall(address _swapper, bytes calldata swapData) public payable returns (uint256 amountOut) {\n    bytes memory ret = _swapper.functionCallWithValue(swapData, msg.value, \"!directSwapperCallFailed\");\n    amountOut = abi.decode(ret, (uint256));\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": []
  }
}