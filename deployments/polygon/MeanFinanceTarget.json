{
  "address": "0x3E64213564cc30107Beb81cd0DCEd3F18dF79B35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_amountOfSwaps",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_swapInterval",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "enum IDCAPermissionManager.Permission[]",
              "name": "permissions",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IDCAPermissionManager.PermissionSet[]",
          "name": "_permissions",
          "type": "tuple[]"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "poolFee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountOfSwaps",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapInterval",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "enum IDCAPermissionManager.Permission[]",
              "name": "permissions",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IDCAPermissionManager.PermissionSet[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract IDCAHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "poolFee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xac9cd73a400506a2389b14033bb7c0ebeb59f1a2c0d18045c16e9bf217d8a8d2",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0x3E64213564cc30107Beb81cd0DCEd3F18dF79B35",
    "transactionIndex": 74,
    "gasUsed": "1490602",
    "logsBloom": "0x
    "blockHash": "0x96b1816645b28176cae64515c013cec9a2ae159a843d37b17e67f8124474dcd0",
    "transactionHash": "0xac9cd73a400506a2389b14033bb7c0ebeb59f1a2c0d18045c16e9bf217d8a8d2",
    "logs": [
      {
        "transactionIndex": 74,
        "blockNumber": 40519067,
        "transactionHash": "0xac9cd73a400506a2389b14033bb7c0ebeb59f1a2c0d18045c16e9bf217d8a8d2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e",
          "0x0000000000000000000000002c74ca71679cf1299936d6104d825c965448907b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a52d6036539832000000000000000000000000000000000000000000000005fe7b713b6f0766670000000000000000000000000000000000000000000000dd7a2fc7bd7a8014ac000000000000000000000000000000000000000000000005fdd643db38b3ce350000000000000000000000000000000000000000000000dd7ad4f51db0d3acde",
        "logIndex": 280,
        "blockHash": "0x96b1816645b28176cae64515c013cec9a2ae159a843d37b17e67f8124474dcd0"
      }
    ],
    "blockNumber": 40519067,
    "cumulativeGasUsed": "12087915",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x11984dc4465481512eb5b777E44061C158CF2259"],
  "numDeployments": 1,
  "solcInputHash": "a2eb27175a6ecc9d6a6410ce4445758c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_amountOfSwaps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDCAPermissionManager.PermissionSet[]\",\"name\":\"_permissions\",\"type\":\"tuple[]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountOfSwaps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDCAPermissionManager.PermissionSet[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract IDCAHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,address,uint256,uint32,uint32,address,(address,uint8[])[])\":{\"params\":{\"_amount\":\"How many \\\"from\\\" tokens will be swapped in total\",\"_amountOfSwaps\":\"How many swaps to execute for this position\",\"_from\":\"The address of the \\\"from\\\" token\",\"_owner\":\"The address of the owner of the position being created\",\"_swapInterval\":\"How frequently the position's swaps should be executed\",\"_to\":\"The address of the \\\"to\\\" token\"},\"returns\":{\"_positionId\":\"The id of the created position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,address,uint256,uint32,uint32,address,(address,uint8[])[])\":{\"notice\":\"Creates a new position\"},\"hub()\":{\"notice\":\"MeanFinance IDCAHub contract for deposit\"},\"swapRouter()\":{\"notice\":\"UniswapV3 swap router contract to swap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MeanFinance/MeanFinanceTarget.sol\":\"MeanFinanceTarget\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n}\\n\",\"keccak256\":\"0xbe5692eac2424884b16c588e7d6249ce256f7858b3f45f425f5efd7f1175e300\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37a35045d40f3bde688c70bb631581cbc609796514319db1361e061da8d9349b\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol';\\nimport './IDCAPermissionManager.sol';\\n\\n/**\\n * @title The interface for all state related queries\\n * @notice These methods allow users to read the hubs's current values\\n */\\ninterface IDCAHubParameters {\\n  /**\\n   * @notice Returns how much will the amount to swap differ from the previous swap. f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA One of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @param swapIntervalMask The byte representation of the swap interval to check\\n   * @param swapNumber The swap number to check\\n   * @return swapDeltaAToB How much less of token A will the following swap require\\n   * @return swapDeltaBToA How much less of token B will the following swap require\\n   */\\n  function swapAmountDelta(\\n    address tokenA,\\n    address tokenB,\\n    bytes1 swapIntervalMask,\\n    uint32 swapNumber\\n  ) external view returns (uint128 swapDeltaAToB, uint128 swapDeltaBToA);\\n\\n  /**\\n   * @notice Returns the sum of the ratios reported in all swaps executed until the given swap number\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA One of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @param swapIntervalMask The byte representation of the swap interval to check\\n   * @param swapNumber The swap number to check\\n   * @return accumRatioAToB The sum of all ratios from A to B\\n   * @return accumRatioBToA The sum of all ratios from B to A\\n   */\\n  function accumRatio(\\n    address tokenA,\\n    address tokenB,\\n    bytes1 swapIntervalMask,\\n    uint32 swapNumber\\n  ) external view returns (uint256 accumRatioAToB, uint256 accumRatioBToA);\\n\\n  /**\\n   * @notice Returns swapping information about a specific pair\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA One of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @param swapIntervalMask The byte representation of the swap interval to check\\n   * @return performedSwaps How many swaps have been executed\\n   * @return nextAmountToSwapAToB How much of token A will be swapped on the next swap\\n   * @return lastSwappedAt Timestamp of the last swap\\n   * @return nextAmountToSwapBToA How much of token B will be swapped on the next swap\\n   */\\n  function swapData(\\n    address tokenA,\\n    address tokenB,\\n    bytes1 swapIntervalMask\\n  )\\n    external\\n    view\\n    returns (\\n      uint32 performedSwaps,\\n      uint224 nextAmountToSwapAToB,\\n      uint32 lastSwappedAt,\\n      uint224 nextAmountToSwapBToA\\n    );\\n\\n  /**\\n   * @notice Returns the byte representation of the set of actice swap intervals for the given pair\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA The smaller of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @return The byte representation of the set of actice swap intervals\\n   */\\n  function activeSwapIntervals(address tokenA, address tokenB) external view returns (bytes1);\\n\\n  /**\\n   * @notice Returns how much of the hub's token balance belongs to the platform\\n   * @param token The token to check\\n   * @return The amount that belongs to the platform\\n   */\\n  function platformBalance(address token) external view returns (uint256);\\n}\\n\\n/**\\n * @title The interface for all position related matters\\n * @notice These methods allow users to create, modify and terminate their positions\\n */\\ninterface IDCAHubPositionHandler {\\n  /// @notice The position of a certain user\\n  struct UserPosition {\\n    // The token that the user deposited and will be swapped in exchange for \\\"to\\\"\\n    IERC20Metadata from;\\n    // The token that the user will get in exchange for their \\\"from\\\" tokens in each swap\\n    IERC20Metadata to;\\n    // How frequently the position's swaps should be executed\\n    uint32 swapInterval;\\n    // How many swaps were executed since deposit, last modification, or last withdraw\\n    uint32 swapsExecuted;\\n    // How many \\\"to\\\" tokens can currently be withdrawn\\n    uint256 swapped;\\n    // How many swaps left the position has to execute\\n    uint32 swapsLeft;\\n    // How many \\\"from\\\" tokens there are left to swap\\n    uint256 remaining;\\n    // How many \\\"from\\\" tokens need to be traded in each swap\\n    uint120 rate;\\n  }\\n\\n  /// @notice A list of positions that all have the same `to` token\\n  struct PositionSet {\\n    // The `to` token\\n    address token;\\n    // The position ids\\n    uint256[] positionIds;\\n  }\\n\\n  /**\\n   * @notice Emitted when a position is terminated\\n   * @param user The address of the user that terminated the position\\n   * @param recipientUnswapped The address of the user that will receive the unswapped tokens\\n   * @param recipientSwapped The address of the user that will receive the swapped tokens\\n   * @param positionId The id of the position that was terminated\\n   * @param returnedUnswapped How many \\\"from\\\" tokens were returned to the caller\\n   * @param returnedSwapped How many \\\"to\\\" tokens were returned to the caller\\n   */\\n  event Terminated(\\n    address indexed user,\\n    address indexed recipientUnswapped,\\n    address indexed recipientSwapped,\\n    uint256 positionId,\\n    uint256 returnedUnswapped,\\n    uint256 returnedSwapped\\n  );\\n\\n  /**\\n   * @notice Emitted when a position is created\\n   * @param depositor The address of the user that creates the position\\n   * @param owner The address of the user that will own the position\\n   * @param positionId The id of the position that was created\\n   * @param fromToken The address of the \\\"from\\\" token\\n   * @param toToken The address of the \\\"to\\\" token\\n   * @param swapInterval How frequently the position's swaps should be executed\\n   * @param rate How many \\\"from\\\" tokens need to be traded in each swap\\n   * @param startingSwap The number of the swap when the position will be executed for the first time\\n   * @param lastSwap The number of the swap when the position will be executed for the last time\\n   * @param permissions The permissions defined for the position\\n   */\\n  event Deposited(\\n    address indexed depositor,\\n    address indexed owner,\\n    uint256 positionId,\\n    address fromToken,\\n    address toToken,\\n    uint32 swapInterval,\\n    uint120 rate,\\n    uint32 startingSwap,\\n    uint32 lastSwap,\\n    IDCAPermissionManager.PermissionSet[] permissions\\n  );\\n\\n  /**\\n   * @notice Emitted when a position is created and extra data is provided\\n   * @param positionId The id of the position that was created\\n   * @param data The extra data that was provided\\n   */\\n  event Miscellaneous(uint256 positionId, bytes data);\\n\\n  /**\\n   * @notice Emitted when a user withdraws all swapped tokens from a position\\n   * @param withdrawer The address of the user that executed the withdraw\\n   * @param recipient The address of the user that will receive the withdrawn tokens\\n   * @param positionId The id of the position that was affected\\n   * @param token The address of the withdrawn tokens. It's the same as the position's \\\"to\\\" token\\n   * @param amount The amount that was withdrawn\\n   */\\n  event Withdrew(address indexed withdrawer, address indexed recipient, uint256 positionId, address token, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when a user withdraws all swapped tokens from many positions\\n   * @param withdrawer The address of the user that executed the withdraws\\n   * @param recipient The address of the user that will receive the withdrawn tokens\\n   * @param positions The positions to withdraw from\\n   * @param withdrew The total amount that was withdrawn from each token\\n   */\\n  event WithdrewMany(address indexed withdrawer, address indexed recipient, PositionSet[] positions, uint256[] withdrew);\\n\\n  /**\\n   * @notice Emitted when a position is modified\\n   * @param user The address of the user that modified the position\\n   * @param positionId The id of the position that was modified\\n   * @param rate How many \\\"from\\\" tokens need to be traded in each swap\\n   * @param startingSwap The number of the swap when the position will be executed for the first time\\n   * @param lastSwap The number of the swap when the position will be executed for the last time\\n   */\\n  event Modified(address indexed user, uint256 positionId, uint120 rate, uint32 startingSwap, uint32 lastSwap);\\n\\n  /// @notice Thrown when a user tries to create a position with the same `from` & `to`\\n  error InvalidToken();\\n\\n  /// @notice Thrown when a user tries to create a position with a swap interval that is not allowed\\n  error IntervalNotAllowed();\\n\\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\\n  error InvalidPosition();\\n\\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\\n  error UnauthorizedCaller();\\n\\n  /// @notice Thrown when a user tries to create a position with zero swaps\\n  error ZeroSwaps();\\n\\n  /// @notice Thrown when a user tries to create a position with zero funds\\n  error ZeroAmount();\\n\\n  /// @notice Thrown when a user tries to withdraw a position whose `to` token doesn't match the specified one\\n  error PositionDoesNotMatchToken();\\n\\n  /// @notice Thrown when a user tries create or modify a position with an amount too big\\n  error AmountTooBig();\\n\\n  /**\\n   * @notice Returns the permission manager contract\\n   * @return The contract itself\\n   */\\n  function permissionManager() external view returns (IDCAPermissionManager);\\n\\n  /**\\n   * @notice Returns total created positions\\n   * @return The total created positions\\n   */\\n  function totalCreatedPositions() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns a user position\\n   * @param positionId The id of the position\\n   * @return position The position itself\\n   */\\n  function userPosition(uint256 positionId) external view returns (UserPosition memory position);\\n\\n  /**\\n   * @notice Creates a new position\\n   * @dev Will revert:\\n   *      - With ZeroAddress if from, to or owner are zero\\n   *      - With InvalidToken if from == to\\n   *      - With ZeroAmount if amount is zero\\n   *      - With AmountTooBig if amount is too big\\n   *      - With ZeroSwaps if amountOfSwaps is zero\\n   *      - With IntervalNotAllowed if swapInterval is not allowed\\n   * @param from The address of the \\\"from\\\" token\\n   * @param to The address of the \\\"to\\\" token\\n   * @param amount How many \\\"from\\\" tokens will be swapped in total\\n   * @param amountOfSwaps How many swaps to execute for this position\\n   * @param swapInterval How frequently the position's swaps should be executed\\n   * @param owner The address of the owner of the position being created\\n   * @param permissions Extra permissions to add to the position. Can be empty\\n   * @return positionId The id of the created position\\n   */\\n  function deposit(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint32 amountOfSwaps,\\n    uint32 swapInterval,\\n    address owner,\\n    IDCAPermissionManager.PermissionSet[] calldata permissions\\n  ) external returns (uint256 positionId);\\n\\n  /**\\n   * @notice Creates a new position\\n   * @dev Will revert:\\n   *      - With ZeroAddress if from, to or owner are zero\\n   *      - With InvalidToken if from == to\\n   *      - With ZeroAmount if amount is zero\\n   *      - With AmountTooBig if amount is too big\\n   *      - With ZeroSwaps if amountOfSwaps is zero\\n   *      - With IntervalNotAllowed if swapInterval is not allowed\\n   * @param from The address of the \\\"from\\\" token\\n   * @param to The address of the \\\"to\\\" token\\n   * @param amount How many \\\"from\\\" tokens will be swapped in total\\n   * @param amountOfSwaps How many swaps to execute for this position\\n   * @param swapInterval How frequently the position's swaps should be executed\\n   * @param owner The address of the owner of the position being created\\n   * @param permissions Extra permissions to add to the position. Can be empty\\n   * @param miscellaneous Bytes that will be emitted, and associated with the position\\n   * @return positionId The id of the created position\\n   */\\n  function deposit(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint32 amountOfSwaps,\\n    uint32 swapInterval,\\n    address owner,\\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\\n    bytes calldata miscellaneous\\n  ) external returns (uint256 positionId);\\n\\n  /**\\n   * @notice Withdraws all swapped tokens from a position to a recipient\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With ZeroAddress if recipient is zero\\n   * @param positionId The position's id\\n   * @param recipient The address to withdraw swapped tokens to\\n   * @return swapped How much was withdrawn\\n   */\\n  function withdrawSwapped(uint256 positionId, address recipient) external returns (uint256 swapped);\\n\\n  /**\\n   * @notice Withdraws all swapped tokens from multiple positions\\n   * @dev Will revert:\\n   *      - With InvalidPosition if any of the position ids are invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position to any of the given positions\\n   *      - With ZeroAddress if recipient is zero\\n   *      - With PositionDoesNotMatchToken if any of the positions do not match the token in their position set\\n   * @param positions A list positions, grouped by `to` token\\n   * @param recipient The address to withdraw swapped tokens to\\n   * @return withdrawn How much was withdrawn for each token\\n   */\\n  function withdrawSwappedMany(PositionSet[] calldata positions, address recipient) external returns (uint256[] memory withdrawn);\\n\\n  /**\\n   * @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\\n   * it is executed in newSwaps swaps\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With AmountTooBig if amount is too big\\n   * @param positionId The position's id\\n   * @param amount Amount of funds to add to the position\\n   * @param newSwaps The new amount of swaps\\n   */\\n  function increasePosition(\\n    uint256 positionId,\\n    uint256 amount,\\n    uint32 newSwaps\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws the specified amount from the unswapped balance and modifies the position so that\\n   * it is executed in newSwaps swaps\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With ZeroSwaps if newSwaps is zero and amount is not the total unswapped balance\\n   * @param positionId The position's id\\n   * @param amount Amount of funds to withdraw from the position\\n   * @param newSwaps The new amount of swaps\\n   * @param recipient The address to send tokens to\\n   */\\n  function reducePosition(\\n    uint256 positionId,\\n    uint256 amount,\\n    uint32 newSwaps,\\n    address recipient\\n  ) external;\\n\\n  /**\\n   * @notice Terminates the position and sends all unswapped and swapped balance to the specified recipients\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With ZeroAddress if recipientUnswapped or recipientSwapped is zero\\n   * @param positionId The position's id\\n   * @param recipientUnswapped The address to withdraw unswapped tokens to\\n   * @param recipientSwapped The address to withdraw swapped tokens to\\n   * @return unswapped The unswapped balance sent to `recipientUnswapped`\\n   * @return swapped The swapped balance sent to `recipientSwapped`\\n   */\\n  function terminate(\\n    uint256 positionId,\\n    address recipientUnswapped,\\n    address recipientSwapped\\n  ) external returns (uint256 unswapped, uint256 swapped);\\n}\\n\\n/**\\n * @title The interface for all swap related matters\\n * @notice These methods allow users to get information about the next swap, and how to execute it\\n */\\ninterface IDCAHubSwapHandler {\\n  /// @notice Information about a swap\\n  struct SwapInfo {\\n    // The tokens involved in the swap\\n    TokenInSwap[] tokens;\\n    // The pairs involved in the swap\\n    PairInSwap[] pairs;\\n  }\\n\\n  /// @notice Information about a token's role in a swap\\n  struct TokenInSwap {\\n    // The token's address\\n    address token;\\n    // How much will be given of this token as a reward\\n    uint256 reward;\\n    // How much of this token needs to be provided by swapper\\n    uint256 toProvide;\\n    // How much of this token will be paid to the platform\\n    uint256 platformFee;\\n  }\\n\\n  /// @notice Information about a pair in a swap\\n  struct PairInSwap {\\n    // The address of one of the tokens\\n    address tokenA;\\n    // The address of the other token\\n    address tokenB;\\n    // The total amount of token A swapped in this pair\\n    uint256 totalAmountToSwapTokenA;\\n    // The total amount of token B swapped in this pair\\n    uint256 totalAmountToSwapTokenB;\\n    // How much is 1 unit of token A when converted to B\\n    uint256 ratioAToB;\\n    // How much is 1 unit of token B when converted to A\\n    uint256 ratioBToA;\\n    // The swap intervals involved in the swap, represented as a byte\\n    bytes1 intervalsInSwap;\\n  }\\n\\n  /// @notice A pair of tokens, represented by their indexes in an array\\n  struct PairIndexes {\\n    // The index of the token A\\n    uint8 indexTokenA;\\n    // The index of the token B\\n    uint8 indexTokenB;\\n  }\\n\\n  /**\\n   * @notice Emitted when a swap is executed\\n   * @param sender The address of the user that initiated the swap\\n   * @param rewardRecipient The address that received the reward\\n   * @param callbackHandler The address that executed the callback\\n   * @param swapInformation All information related to the swap\\n   * @param borrowed How much was borrowed\\n   * @param fee The swap fee at the moment of the swap\\n   */\\n  event Swapped(\\n    address indexed sender,\\n    address indexed rewardRecipient,\\n    address indexed callbackHandler,\\n    SwapInfo swapInformation,\\n    uint256[] borrowed,\\n    uint32 fee\\n  );\\n\\n  /// @notice Thrown when pairs indexes are not sorted correctly\\n  error InvalidPairs();\\n\\n  /// @notice Thrown when trying to execute a swap, but there is nothing to swap\\n  error NoSwapsToExecute();\\n\\n  /**\\n   * @notice Returns all information related to the next swap\\n   * @dev Will revert with:\\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\\n   * @param tokens The tokens involved in the next swap\\n   * @param pairs The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\\n   *        the possibility to calculate the next swap information for privileged and non-privileged accounts\\n   * @param oracleData Bytes to send to the oracle when executing a quote\\n   * @return swapInformation The information about the next swap\\n   */\\n  function getNextSwapInfo(\\n    address[] calldata tokens,\\n    PairIndexes[] calldata pairs,\\n    bool calculatePrivilegedAvailability,\\n    bytes calldata oracleData\\n  ) external view returns (SwapInfo memory swapInformation);\\n\\n  /**\\n   * @notice Executes a flash swap\\n   * @dev Will revert with:\\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\\n   *      - With Paused if swaps are paused by protocol\\n   *      - With NoSwapsToExecute if there are no swaps to execute for the given pairs\\n   *      - With LiquidityNotReturned if the required tokens were not back during the callback\\n   * @param tokens The tokens involved in the next swap\\n   * @param pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\\n   * @param rewardRecipient The address to send the reward to\\n   * @param callbackHandler Address to call for callback (and send the borrowed tokens to)\\n   * @param borrow How much to borrow of each of the tokens in tokens. The amount must match the position of the token in the tokens array\\n   * @param callbackData Bytes to send to the caller during the callback\\n   * @param oracleData Bytes to send to the oracle when executing a quote\\n   * @return Information about the executed swap\\n   */\\n  function swap(\\n    address[] calldata tokens,\\n    PairIndexes[] calldata pairsToSwap,\\n    address rewardRecipient,\\n    address callbackHandler,\\n    uint256[] calldata borrow,\\n    bytes calldata callbackData,\\n    bytes calldata oracleData\\n  ) external returns (SwapInfo memory);\\n}\\n\\n/**\\n * @title The interface for handling all configuration\\n * @notice This contract will manage configuration that affects all pairs, swappers, etc\\n */\\ninterface IDCAHubConfigHandler {\\n  /**\\n   * @notice Emitted when a new oracle is set\\n   * @param oracle The new oracle contract\\n   */\\n  event OracleSet(ITokenPriceOracle oracle);\\n\\n  /**\\n   * @notice Emitted when a new swap fee is set\\n   * @param feeSet The new swap fee\\n   */\\n  event SwapFeeSet(uint32 feeSet);\\n\\n  /**\\n   * @notice Emitted when new swap intervals are allowed\\n   * @param swapIntervals The new swap intervals\\n   */\\n  event SwapIntervalsAllowed(uint32[] swapIntervals);\\n\\n  /**\\n   * @notice Emitted when some swap intervals are no longer allowed\\n   * @param swapIntervals The swap intervals that are no longer allowed\\n   */\\n  event SwapIntervalsForbidden(uint32[] swapIntervals);\\n\\n  /**\\n   * @notice Emitted when a new platform fee ratio is set\\n   * @param platformFeeRatio The new platform fee ratio\\n   */\\n  event PlatformFeeRatioSet(uint16 platformFeeRatio);\\n\\n  /**\\n   * @notice Emitted when allowed states of tokens are updated\\n   * @param tokens Array of updated tokens\\n   * @param allowed Array of new allow state per token were allowed[i] is the updated state of tokens[i]\\n   */\\n  event TokensAllowedUpdated(address[] tokens, bool[] allowed);\\n\\n  /// @notice Thrown when trying to interact with an unallowed token\\n  error UnallowedToken();\\n\\n  /// @notice Thrown when set allowed tokens input is not valid\\n  error InvalidAllowedTokensInput();\\n\\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\\n  error HighFee();\\n\\n  /// @notice Thrown when trying to set a fee that is not multiple of 100\\n  error InvalidFee();\\n\\n  /// @notice Thrown when trying to set a fee ratio that is higher that the maximum allowed\\n  error HighPlatformFeeRatio();\\n\\n  /**\\n   * @notice Returns the max fee ratio that can be set\\n   * @dev Cannot be modified\\n   * @return The maximum possible value\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_PLATFORM_FEE_RATIO() external view returns (uint16);\\n\\n  /**\\n   * @notice Returns the fee charged on swaps\\n   * @return swapFee The fee itself\\n   */\\n  function swapFee() external view returns (uint32 swapFee);\\n\\n  /**\\n   * @notice Returns the price oracle contract\\n   * @return oracle The contract itself\\n   */\\n  function oracle() external view returns (ITokenPriceOracle oracle);\\n\\n  /**\\n   * @notice Returns how much will the platform take from the fees collected in swaps\\n   * @return The current ratio\\n   */\\n  function platformFeeRatio() external view returns (uint16);\\n\\n  /**\\n   * @notice Returns the max fee that can be set for swaps\\n   * @dev Cannot be modified\\n   * @return maxFee The maximum possible fee\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32 maxFee);\\n\\n  /**\\n   * @notice Returns a byte that represents allowed swap intervals\\n   * @return allowedSwapIntervals The allowed swap intervals\\n   */\\n  function allowedSwapIntervals() external view returns (bytes1 allowedSwapIntervals);\\n\\n  /**\\n   * @notice Returns if a token is currently allowed or not\\n   * @return Allowed state of token\\n   */\\n  function allowedTokens(address token) external view returns (bool);\\n\\n  /**\\n   * @notice Returns token's magnitude (10**decimals)\\n   * @return Stored magnitude for token\\n   */\\n  function tokenMagnitude(address token) external view returns (uint120);\\n\\n  /**\\n   * @notice Returns whether swaps and deposits are currently paused\\n   * @return isPaused Whether swaps and deposits are currently paused\\n   */\\n  function paused() external view returns (bool isPaused);\\n\\n  /**\\n   * @notice Sets a new swap fee\\n   * @dev Will revert with HighFee if the fee is higher than the maximum\\n   * @dev Will revert with InvalidFee if the fee is not multiple of 100\\n   * @param fee The new swap fee\\n   */\\n  function setSwapFee(uint32 fee) external;\\n\\n  /**\\n   * @notice Sets a new price oracle\\n   * @dev Will revert with ZeroAddress if the zero address is passed\\n   * @param oracle The new oracle contract\\n   */\\n  function setOracle(ITokenPriceOracle oracle) external;\\n\\n  /**\\n   * @notice Sets a new platform fee ratio\\n   * @dev Will revert with HighPlatformFeeRatio if given ratio is too high\\n   * @param platformFeeRatio The new ratio\\n   */\\n  function setPlatformFeeRatio(uint16 platformFeeRatio) external;\\n\\n  /**\\n   * @notice Adds new swap intervals to the allowed list\\n   * @param swapIntervals The new swap intervals\\n   */\\n  function addSwapIntervalsToAllowedList(uint32[] calldata swapIntervals) external;\\n\\n  /**\\n   * @notice Removes some swap intervals from the allowed list\\n   * @param swapIntervals The swap intervals to remove\\n   */\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata swapIntervals) external;\\n\\n  /// @notice Pauses all swaps and deposits\\n  function pause() external;\\n\\n  /// @notice Unpauses all swaps and deposits\\n  function unpause() external;\\n}\\n\\n/**\\n * @title The interface for handling platform related actions\\n * @notice This contract will handle all actions that affect the platform in some way\\n */\\ninterface IDCAHubPlatformHandler {\\n  /**\\n   * @notice Emitted when someone withdraws from the paltform balance\\n   * @param sender The address of the user that initiated the withdraw\\n   * @param recipient The address that received the withdraw\\n   * @param amounts The tokens (and the amount) that were withdrawn\\n   */\\n  event WithdrewFromPlatform(address indexed sender, address indexed recipient, IDCAHub.AmountOfToken[] amounts);\\n\\n  /**\\n   * @notice Withdraws tokens from the platform balance\\n   * @param amounts The amounts to withdraw\\n   * @param recipient The address that will receive the tokens\\n   */\\n  function withdrawFromPlatformBalance(IDCAHub.AmountOfToken[] calldata amounts, address recipient) external;\\n}\\n\\ninterface IDCAHub is IDCAHubParameters, IDCAHubConfigHandler, IDCAHubSwapHandler, IDCAHubPositionHandler, IDCAHubPlatformHandler {\\n  /// @notice Specifies an amount of a token. For example to determine how much to borrow from certain tokens\\n  struct AmountOfToken {\\n    // The tokens' address\\n    address token;\\n    // How much to borrow or withdraw of the specified token\\n    uint256 amount;\\n  }\\n\\n  /// @notice Thrown when one of the parameters is a zero address\\n  error ZeroAddress();\\n\\n  /// @notice Thrown when the expected liquidity is not returned in flash swaps\\n  error LiquidityNotReturned();\\n\\n  /// @notice Thrown when a list of token pairs is not sorted, or if there are duplicates\\n  error InvalidTokens();\\n}\\n\",\"keccak256\":\"0x4863e91434fa2bca89e8ff16bc35743103a89a39cfc8f9bb963d62fc430f3966\",\"license\":\"GPL-2.0-or-later\"},\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol';\\n\\ninterface IERC721BasicEnumerable {\\n  /**\\n   * @notice Count NFTs tracked by this contract\\n   * @return A count of valid NFTs tracked by this contract, where each one of\\n   *         them has an assigned and queryable owner not equal to the zero address\\n   */\\n  function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @title The interface for all permission related matters\\n * @notice These methods allow users to set and remove permissions to their positions\\n */\\ninterface IDCAPermissionManager is IERC721, IERC721BasicEnumerable {\\n  /// @notice Set of possible permissions\\n  enum Permission {\\n    INCREASE,\\n    REDUCE,\\n    WITHDRAW,\\n    TERMINATE\\n  }\\n\\n  /// @notice A set of permissions for a specific operator\\n  struct PermissionSet {\\n    // The address of the operator\\n    address operator;\\n    // The permissions given to the overator\\n    Permission[] permissions;\\n  }\\n\\n  /// @notice A collection of permissions sets for a specific position\\n  struct PositionPermissions {\\n    // The id of the token\\n    uint256 tokenId;\\n    // The permissions to assign to the position\\n    PermissionSet[] permissionSets;\\n  }\\n\\n  /**\\n   * @notice Emitted when permissions for a token are modified\\n   * @param tokenId The id of the token\\n   * @param permissions The set of permissions that were updated\\n   */\\n  event Modified(uint256 tokenId, PermissionSet[] permissions);\\n\\n  /**\\n   * @notice Emitted when the address for a new descritor is set\\n   * @param descriptor The new descriptor contract\\n   */\\n  event NFTDescriptorSet(IDCAHubPositionDescriptor descriptor);\\n\\n  /// @notice Thrown when a user tries to set the hub, once it was already set\\n  error HubAlreadySet();\\n\\n  /// @notice Thrown when a user provides a zero address when they shouldn't\\n  error ZeroAddress();\\n\\n  /// @notice Thrown when a user calls a method that can only be executed by the hub\\n  error OnlyHubCanExecute();\\n\\n  /// @notice Thrown when a user tries to modify permissions for a token they do not own\\n  error NotOwner();\\n\\n  /// @notice Thrown when a user tries to execute a permit with an expired deadline\\n  error ExpiredDeadline();\\n\\n  /// @notice Thrown when a user tries to execute a permit with an invalid signature\\n  error InvalidSignature();\\n\\n  /**\\n   * @notice The permit typehash used in the permit signature\\n   * @return The typehash for the permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the permission permit signature\\n   * @return The typehash for the permission permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the multi permission permit signature\\n   * @return The typehash for the multi permission permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MULTI_PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the permission permit signature\\n   * @return The typehash for the permission set\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMISSION_SET_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the multi permission permit signature\\n   * @return The typehash for the position permissions\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function POSITION_PERMISSIONS_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The domain separator used in the permit signature\\n   * @return The domain seperator used in encoding of permit signature\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the NFT descriptor contract\\n   * @return The contract for the NFT descriptor\\n   */\\n  function nftDescriptor() external returns (IDCAHubPositionDescriptor);\\n\\n  /**\\n   * @notice Returns the address of the DCA Hub\\n   * @return The address of the DCA Hub\\n   */\\n  function hub() external returns (address);\\n\\n  /**\\n   * @notice Returns the next nonce to use for a given user\\n   * @param user The address of the user\\n   * @return nonce The next nonce to use\\n   */\\n  function nonces(address user) external returns (uint256 nonce);\\n\\n  /**\\n   * @notice Returns whether the given address has the permission for the given token\\n   * @param id The id of the token to check\\n   * @param account The address of the user to check\\n   * @param permission The permission to check\\n   * @return Whether the user has the permission or not\\n   */\\n  function hasPermission(\\n    uint256 id,\\n    address account,\\n    Permission permission\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice Returns whether the given address has the permissions for the given token\\n   * @param id The id of the token to check\\n   * @param account The address of the user to check\\n   * @param permissions The permissions to check\\n   * @return hasPermissions Whether the user has each permission or not\\n   */\\n  function hasPermissions(\\n    uint256 id,\\n    address account,\\n    Permission[] calldata permissions\\n  ) external view returns (bool[] memory hasPermissions);\\n\\n  /**\\n   * @notice Sets the address for the hub\\n   * @dev Can only be successfully executed once. Once it's set, it can be modified again\\n   *      Will revert:\\n   *      - With ZeroAddress if address is zero\\n   *      - With HubAlreadySet if the hub has already been set\\n   * @param hub The address to set for the hub\\n   */\\n  function setHub(address hub) external;\\n\\n  /**\\n   * @notice Mints a new NFT with the given id, and sets the permissions for it\\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\\n   * @param id The id of the new NFT\\n   * @param owner The owner of the new NFT\\n   * @param permissions Permissions to set for the new NFT\\n   */\\n  function mint(\\n    uint256 id,\\n    address owner,\\n    PermissionSet[] calldata permissions\\n  ) external;\\n\\n  /**\\n   * @notice Burns the NFT with the given id, and clears all permissions\\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\\n   * @param id The token's id\\n   */\\n  function burn(uint256 id) external;\\n\\n  /**\\n   * @notice Sets new permissions for the given position\\n   * @dev Will revert with NotOwner if the caller is not the token's owner.\\n   *      Operators that are not part of the given permission sets do not see their permissions modified.\\n   *      In order to remove permissions to an operator, provide an empty list of permissions for them\\n   * @param id The token's id\\n   * @param permissions A list of permission sets\\n   */\\n  function modify(uint256 id, PermissionSet[] calldata permissions) external;\\n\\n  /**\\n   * @notice Sets new permissions for the given positions\\n   * @dev This is basically the same as executing multiple `modify`\\n   * @param permissions A list of position permissions to set\\n   */\\n  function modifyMany(PositionPermissions[] calldata permissions) external;\\n\\n  /**\\n   * @notice Approves spending of a specific token ID by spender via signature\\n   * @param spender The account that is being approved\\n   * @param tokenId The ID of the token that is being approved for spending\\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n   */\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Sets permissions via signature\\n   * @dev This method works similarly to `modifyMany`, but instead of being executed by the owner, it can be set by signature\\n   * @param permissions The permissions to set for the different positions\\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n   */\\n  function multiPermissionPermit(\\n    PositionPermissions[] calldata permissions,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Sets permissions via signature\\n   * @dev This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\\n   * @param permissions The permissions to set\\n   * @param tokenId The token's id\\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n   */\\n  function permissionPermit(\\n    PermissionSet[] calldata permissions,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Sets a new NFT descriptor\\n   * @dev Will revert with ZeroAddress if address is zero\\n   * @param descriptor The new NFT descriptor contract\\n   */\\n  function setNFTDescriptor(IDCAHubPositionDescriptor descriptor) external;\\n}\\n\",\"keccak256\":\"0x90b20be7552797f8967baa8228b3dfff60e129fa0ec4cf32e136ad0ffeb79f16\",\"license\":\"GPL-2.0-or-later\"},\"@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\n/**\\n * @title The interface for generating a description for a position in a DCA Hub\\n * @notice Contracts that implement this interface must return a base64 JSON with the entire description\\n */\\ninterface IDCAHubPositionDescriptor {\\n  /**\\n   * @notice Generates a positions's description, both the JSON and the image inside\\n   * @param hub The address of the DCA Hub\\n   * @param positionId The token/position id\\n   * @return description The position's description\\n   */\\n  function tokenURI(address hub, uint256 positionId) external view returns (string memory description);\\n}\\n\",\"keccak256\":\"0x2f5b3f67cf9f0f23be3eb0a8c8edd953ded1dcd8bf074a27e8d2869e200b0a73\",\"license\":\"GPL-2.0-or-later\"},\"@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for an oracle that provides price quotes\\n * @notice These methods allow users to add support for pairs, and then ask for quotes\\n */\\ninterface ITokenPriceOracle {\\n  /// @notice Thrown when trying to add support for a pair that cannot be supported\\n  error PairCannotBeSupported(address tokenA, address tokenB);\\n\\n  /// @notice Thrown when trying to execute a quote with a pair that isn't supported yet\\n  error PairNotSupportedYet(address tokenA, address tokenB);\\n\\n  /**\\n   * @notice Returns whether this oracle can support the given pair of tokens\\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @return Whether the given pair of tokens can be supported by the oracle\\n   */\\n  function canSupportPair(address tokenA, address tokenB) external view returns (bool);\\n\\n  /**\\n   * @notice Returns whether this oracle is already supporting the given pair of tokens\\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @return Whether the given pair of tokens is already being supported by the oracle\\n   */\\n  function isPairAlreadySupported(address tokenA, address tokenB) external view returns (bool);\\n\\n  /**\\n   * @notice Returns a quote, based on the given tokens and amount\\n   * @dev Will revert if pair isn't supported\\n   * @param tokenIn The token that will be provided\\n   * @param amountIn The amount that will be provided\\n   * @param tokenOut The token we would like to quote\\n   * @param data Custom data that the oracle might need to operate\\n   * @return amountOut How much `tokenOut` will be returned in exchange for `amountIn` amount of `tokenIn`\\n   */\\n  function quote(\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    bytes calldata data\\n  ) external view returns (uint256 amountOut);\\n\\n  /**\\n   * @notice Add or reconfigures the support for a given pair. This function will let the oracle take some actions\\n   *         to configure the pair, in preparation for future quotes. Can be called many times in order to let the oracle\\n   *         re-configure for a new context\\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @param data Custom data that the oracle might need to operate\\n   */\\n  function addOrModifySupportForPair(\\n    address tokenA,\\n    address tokenB,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported,\\n   *         then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation\\n   *         for future quotes\\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @param data Custom data that the oracle might need to operate\\n   */\\n  function addSupportForPairIfNeeded(\\n    address tokenA,\\n    address tokenB,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xaa43e406144c5108a7f1ac330c434121f4acb7b50b6530dba4e205d2db520a0d\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/MeanFinance/MeanFinanceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol\\\";\\n\\ncontract MeanFinanceAdapter {\\n    /// @notice MeanFinance IDCAHub contract for deposit\\n    /// @dev see https://docs.mean.finance/guides/smart-contract-registry\\n    IDCAHub public immutable hub =\\n        IDCAHub(0xA5AdC5484f9997fBF7D405b9AA62A7d88883C345);\\n\\n    /// Payable\\n    receive() virtual external payable {}\\n\\n    /// @notice Creates a new position\\n    /// @param _from The address of the \\\"from\\\" token\\n    /// @param _to The address of the \\\"to\\\" token\\n    /// @param _amount How many \\\"from\\\" tokens will be swapped in total\\n    /// @param _amountOfSwaps How many swaps to execute for this position\\n    /// @param _swapInterval How frequently the position's swaps should be executed\\n    /// @param _owner The address of the owner of the position being created\\n    /// @return _positionId The id of the created position\\n    function deposit(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _amountOfSwaps,\\n        uint32 _swapInterval,\\n        address _owner,\\n        IDCAPermissionManager.PermissionSet[] memory _permissions\\n    ) public returns (uint256 _positionId) {\\n        // We need to increase the allowance for the hub before calling deposit\\n        IERC20(_from).approve(address(hub), _amount);\\n        _positionId = hub.deposit(\\n            _from,\\n            _to,\\n            _amount,\\n            _amountOfSwaps,\\n            _swapInterval,\\n            _owner,\\n            _permissions\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x05b2a42979167bfbf584df0de236b59672e5fe490aea8e63577d392845d42c12\",\"license\":\"UNLICENSED\"},\"contracts/MeanFinance/MeanFinanceTarget.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IConnext} from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport {IXReceiver} from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MeanFinanceAdapter.sol\\\";\\nimport \\\"../Uniswap/UniswapAdapter.sol\\\";\\n\\ncontract MeanFinanceTarget is MeanFinanceAdapter, UniswapAdapter {\\n    // The Connext contract on this domain\\n    IConnext public immutable connext;\\n\\n    receive()\\n        external\\n        payable\\n        virtual\\n        override(MeanFinanceAdapter, UniswapAdapter)\\n    {}\\n\\n    /// Modifier\\n    modifier onlyConnext() {\\n        require(msg.sender == address(connext), \\\"Caller must be Connext\\\");\\n        _;\\n    }\\n\\n    constructor(address _connext) {\\n        connext = IConnext(_connext);\\n    }\\n\\n    function xReceive(\\n        bytes32 _transferId,\\n        uint256 _amount, // Final Amount receive via Connext(After AMM calculation)\\n        address _asset,\\n        address _originSender,\\n        uint32 _origin,\\n        bytes calldata _callData\\n    ) external returns (bytes memory) {\\n        uint256 amount = _amount;\\n        // Decode calldata\\n        (\\n            uint24 poolFee,\\n            uint256 amountOutMin,\\n            address from,\\n            address to,\\n            uint32 amountOfSwaps,\\n            uint32 swapInterval,\\n            address owner,\\n            IDCAPermissionManager.PermissionSet[] memory permissions\\n        ) = decode(_callData);\\n\\n        require(amount > 0, \\\"!amount\\\");\\n        require(amountOutMin > 0, \\\"!amountOut\\\");\\n        require(from != address(0), \\\"!invalid\\\");\\n\\n        if (from != _asset) {\\n            // swap to deposit asset if needed\\n            amount = swap(_asset, from, poolFee, amount, amountOutMin);\\n        }\\n\\n        // deposit\\n        deposit(\\n            from,\\n            to,\\n            amount,\\n            amountOfSwaps,\\n            swapInterval,\\n            owner,\\n            permissions\\n        );\\n    }\\n\\n    function encode(\\n        uint24 poolFee,\\n        uint256 amountOutMin,\\n        address from,\\n        address to,\\n        uint32 amountOfSwaps,\\n        uint32 swapInterval,\\n        address owner,\\n        IDCAPermissionManager.PermissionSet[] memory permissions\\n    ) external pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                poolFee,\\n                amountOutMin,\\n                from,\\n                to,\\n                amountOfSwaps,\\n                swapInterval,\\n                owner,\\n                permissions\\n            );\\n    }\\n\\n    /// INTERNAL\\n    function decode(\\n        bytes calldata data\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24 poolFee,\\n            uint256 amountOutMin,\\n            address from,\\n            address to,\\n            uint32 amountOfSwaps,\\n            uint32 swapInterval,\\n            address owner,\\n            IDCAPermissionManager.PermissionSet[] memory permissions\\n        )\\n    {\\n        (\\n            poolFee,\\n            amountOutMin,\\n            from,\\n            to,\\n            amountOfSwaps,\\n            swapInterval,\\n            owner,\\n            permissions\\n        ) = abi.decode(\\n            data,\\n            (\\n                uint24,\\n                uint256,\\n                address,\\n                address,\\n                uint32,\\n                uint32,\\n                address,\\n                IDCAPermissionManager.PermissionSet[]\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6e85a1aaefd56c7138b1d3109734227e031307b701d42af1e89b3fd6562e82e0\",\"license\":\"UNLICENSED\"},\"contracts/Uniswap/UniswapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\ncontract UniswapAdapter {\\n    /// @notice UniswapV3 swap router contract to swap\\n    /// @dev If deploying to celo, change hardcoded address. see https://docs.uniswap.org/contracts/v3/reference/deployments\\n    ISwapRouter public immutable swapRouter =\\n        ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    /// Payable\\n    receive() virtual external payable {}\\n\\n    function swap(\\n        address fromAsset,\\n        address toAsset,\\n        uint24 poolFee,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) public returns (uint256 amountOut) {\\n        // Approve the uniswap router to spend fromAsset.\\n        TransferHelper.safeApprove(fromAsset, address(swapRouter), amountIn);\\n        // Set up uniswap swap params.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n            .ExactInputSingleParams({\\n                tokenIn: fromAsset,\\n                tokenOut: toAsset,\\n                fee: poolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMin,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0x21b6d9d64664b8b8823f48a768f513577e1831ca2cf933fb708de4892db0bf55\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e060405273a5adc5484f9997fbf7d405b9aa62a7d88883c34573ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff168152503480156200009f57600080fd5b5060405162001be238038062001be28339818101604052810190620000c591906200016a565b8073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050506200019c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001328262000105565b9050919050565b620001448162000125565b81146200015057600080fd5b50565b600081519050620001648162000139565b92915050565b60006020828403121562000183576200018262000100565b5b6000620001938482850162000153565b91505092915050565b60805160a05160c0516119fa620001e86000396000610544015260008181610221015281816102e401526104e20152600081816101f7015281816103aa015261042d01526119fa6000f3fe6080604052600436106100745760003560e01c8063c31c9c071161004e578063c31c9c0714610125578063c7c3c90514610150578063de4b05481461018d578063fd614f41146101b85761007b565b8063365a86fc146100805780633bf237d5146100ab5780636b29e1bd146100e85761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100956101f5565b6040516100a2919061090c565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd91906109ea565b610219565b6040516100df9190610a74565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610da0565b61038a565b60405161011c9190610a74565b60405180910390f35b34801561013157600080fd5b5061013a6104e0565b6040516101479190610e7f565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610e9a565b610504565b6040516101849190610feb565b60405180910390f35b34801561019957600080fd5b506101a2610542565b6040516101af919061102e565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da91906110da565b610566565b6040516101ec9190610feb565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610246867f0000000000000000000000000000000000000000000000000000000000000000856106ef565b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018662ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161033b9190611267565b6020604051808303816000875af115801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e9190611298565b91505095945050505050565b60008773ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000886040518363ffffffff1660e01b81526004016103e79291906112d4565b6020604051808303816000875af1158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190611335565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636b29e1bd898989898989896040518863ffffffff1660e01b81526004016104909796959493929190611596565b6020604051808303816000875af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190611298565b9050979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060888888888888888860405160200161052598979695949392919061161b565b604051602081830303815290604052905098975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008790506000806000806000806000806105838c8c610844565b97509750975097509750975097509750600089116105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd906116fd565b60405180910390fd5b60008711610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061090611769565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f906117d5565b60405180910390fd5b8e73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146106cb576106c88f878a8c8b610219565b98505b6106da86868b8787878761038a565b50505050505050505050979650505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016107249291906112d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161078e9190611831565b6000604051808303816000865af19150503d80600081146107cb576040519150601f19603f3d011682016040523d82523d6000602084013e6107d0565b606091505b50915091508180156107fe57506000815114806107fd5750808060200190518101906107fc9190611335565b5b5b61083d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083490611894565b60405180910390fd5b5050505050565b60008060008060008060006060898981019061086091906118f2565b809850819950829a50839b50849c50859d50869e50879f5050505050505050509295985092959890939650565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108d26108cd6108c88461088d565b6108ad565b61088d565b9050919050565b60006108e4826108b7565b9050919050565b60006108f6826108d9565b9050919050565b610906816108eb565b82525050565b600060208201905061092160008301846108fd565b92915050565b6000604051905090565b600080fd5b600080fd5b60006109468261088d565b9050919050565b6109568161093b565b811461096157600080fd5b50565b6000813590506109738161094d565b92915050565b600062ffffff82169050919050565b61099181610979565b811461099c57600080fd5b50565b6000813590506109ae81610988565b92915050565b6000819050919050565b6109c7816109b4565b81146109d257600080fd5b50565b6000813590506109e4816109be565b92915050565b600080600080600060a08688031215610a0657610a05610931565b5b6000610a1488828901610964565b9550506020610a2588828901610964565b9450506040610a368882890161099f565b9350506060610a47888289016109d5565b9250506080610a58888289016109d5565b9150509295509295909350565b610a6e816109b4565b82525050565b6000602082019050610a896000830184610a65565b92915050565b600063ffffffff82169050919050565b610aa881610a8f565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b1982610ad0565b810181811067ffffffffffffffff82111715610b3857610b37610ae1565b5b80604052505050565b6000610b4b610927565b9050610b578282610b10565b919050565b600067ffffffffffffffff821115610b7757610b76610ae1565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610bb257610bb1610ae1565b5b602082029050602081019050919050565b60048110610bd057600080fd5b50565b600081359050610be281610bc3565b92915050565b6000610bfb610bf684610b97565b610b41565b90508083825260208201905060208402830185811115610c1e57610c1d610b88565b5b835b81811015610c475780610c338882610bd3565b845260208401935050602081019050610c20565b5050509392505050565b600082601f830112610c6657610c65610acb565b5b8135610c76848260208601610be8565b91505092915050565b600060408284031215610c9557610c94610b8d565b5b610c9f6040610b41565b90506000610caf84828501610964565b600083015250602082013567ffffffffffffffff811115610cd357610cd2610b92565b5b610cdf84828501610c51565b60208301525092915050565b6000610cfe610cf984610b5c565b610b41565b90508083825260208201905060208402830185811115610d2157610d20610b88565b5b835b81811015610d6857803567ffffffffffffffff811115610d4657610d45610acb565b5b808601610d538982610c7f565b85526020850194505050602081019050610d23565b5050509392505050565b600082601f830112610d8757610d86610acb565b5b8135610d97848260208601610ceb565b91505092915050565b600080600080600080600060e0888a031215610dbf57610dbe610931565b5b6000610dcd8a828b01610964565b9750506020610dde8a828b01610964565b9650506040610def8a828b016109d5565b9550506060610e008a828b01610ab6565b9450506080610e118a828b01610ab6565b93505060a0610e228a828b01610964565b92505060c088013567ffffffffffffffff811115610e4357610e42610936565b5b610e4f8a828b01610d72565b91505092959891949750929550565b6000610e69826108d9565b9050919050565b610e7981610e5e565b82525050565b6000602082019050610e946000830184610e70565b92915050565b600080600080600080600080610100898b031215610ebb57610eba610931565b5b6000610ec98b828c0161099f565b9850506020610eda8b828c016109d5565b9750506040610eeb8b828c01610964565b9650506060610efc8b828c01610964565b9550506080610f0d8b828c01610ab6565b94505060a0610f1e8b828c01610ab6565b93505060c0610f2f8b828c01610964565b92505060e089013567ffffffffffffffff811115610f5057610f4f610936565b5b610f5c8b828c01610d72565b9150509295985092959890939650565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fa6578082015181840152602081019050610f8b565b60008484015250505050565b6000610fbd82610f6c565b610fc78185610f77565b9350610fd7818560208601610f88565b610fe081610ad0565b840191505092915050565b600060208201905081810360008301526110058184610fb2565b905092915050565b6000611018826108d9565b9050919050565b6110288161100d565b82525050565b6000602082019050611043600083018461101f565b92915050565b6000819050919050565b61105c81611049565b811461106757600080fd5b50565b60008135905061107981611053565b92915050565b600080fd5b60008083601f84011261109a57611099610acb565b5b8235905067ffffffffffffffff8111156110b7576110b661107f565b5b6020830191508360018202830111156110d3576110d2610b88565b5b9250929050565b600080600080600080600060c0888a0312156110f9576110f8610931565b5b60006111078a828b0161106a565b97505060206111188a828b016109d5565b96505060406111298a828b01610964565b955050606061113a8a828b01610964565b945050608061114b8a828b01610ab6565b93505060a088013567ffffffffffffffff81111561116c5761116b610936565b5b6111788a828b01611084565b925092505092959891949750929550565b6111928161093b565b82525050565b6111a181610979565b82525050565b6111b0816109b4565b82525050565b6111bf8161088d565b82525050565b610100820160008201516111dc6000850182611189565b5060208201516111ef6020850182611189565b5060408201516112026040850182611198565b5060608201516112156060850182611189565b50608082015161122860808501826111a7565b5060a082015161123b60a08501826111a7565b5060c082015161124e60c08501826111a7565b5060e082015161126160e08501826111b6565b50505050565b60006101008201905061127d60008301846111c5565b92915050565b600081519050611292816109be565b92915050565b6000602082840312156112ae576112ad610931565b5b60006112bc84828501611283565b91505092915050565b6112ce8161093b565b82525050565b60006040820190506112e960008301856112c5565b6112f66020830184610a65565b9392505050565b60008115159050919050565b611312816112fd565b811461131d57600080fd5b50565b60008151905061132f81611309565b92915050565b60006020828403121561134b5761134a610931565b5b600061135984828501611320565b91505092915050565b61136b81610a8f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611409576114086113c9565b5b50565b600081905061141a826113f8565b919050565b600061142a8261140c565b9050919050565b61143a8161141f565b82525050565b600061144c8383611431565b60208301905092915050565b6000602082019050919050565b60006114708261139d565b61147a81856113a8565b9350611485836113b9565b8060005b838110156114b657815161149d8882611440565b97506114a883611458565b925050600181019050611489565b5085935050505092915050565b60006040830160008301516114db6000860182611189565b50602083015184820360208601526114f38282611465565b9150508091505092915050565b600061150c83836114c3565b905092915050565b6000602082019050919050565b600061152c82611371565b611536818561137c565b9350836020820285016115488561138d565b8060005b8581101561158457848403895281516115658582611500565b945061157083611514565b925060208a0199505060018101905061154c565b50829750879550505050505092915050565b600060e0820190506115ab600083018a6112c5565b6115b860208301896112c5565b6115c56040830188610a65565b6115d26060830187611362565b6115df6080830186611362565b6115ec60a08301856112c5565b81810360c08301526115fe8184611521565b905098975050505050505050565b61161581610979565b82525050565b600061010082019050611631600083018b61160c565b61163e602083018a610a65565b61164b60408301896112c5565b61165860608301886112c5565b6116656080830187611362565b61167260a0830186611362565b61167f60c08301856112c5565b81810360e08301526116918184611521565b90509998505050505050505050565b600082825260208201905092915050565b7f21616d6f756e7400000000000000000000000000000000000000000000000000600082015250565b60006116e76007836116a0565b91506116f2826116b1565b602082019050919050565b60006020820190508181036000830152611716816116da565b9050919050565b7f21616d6f756e744f757400000000000000000000000000000000000000000000600082015250565b6000611753600a836116a0565b915061175e8261171d565b602082019050919050565b6000602082019050818103600083015261178281611746565b9050919050565b7f21696e76616c6964000000000000000000000000000000000000000000000000600082015250565b60006117bf6008836116a0565b91506117ca82611789565b602082019050919050565b600060208201905081810360008301526117ee816117b2565b9050919050565b600081905092915050565b600061180b82610f6c565b61181581856117f5565b9350611825818560208601610f88565b80840191505092915050565b600061183d8284611800565b915081905092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b600061187e6002836116a0565b915061188982611848565b602082019050919050565b600060208201905081810360008301526118ad81611871565b9050919050565b60006118bf8261088d565b9050919050565b6118cf816118b4565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b600080600080600080600080610100898b03121561191357611912610931565b5b60006119218b828c0161099f565b98505060206119328b828c016109d5565b97505060406119438b828c016118dd565b96505060606119548b828c016118dd565b95505060806119658b828c01610ab6565b94505060a06119768b828c01610ab6565b93505060c06119878b828c016118dd565b92505060e089013567ffffffffffffffff8111156119a8576119a7610936565b5b6119b48b828c01610d72565b915050929598509295989093965056fea26469706673582212204c7586c5ce9f0fed5b954c0a39d159b5a33e84d60f3ee37af73cfe38291627d064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063c31c9c071161004e578063c31c9c0714610125578063c7c3c90514610150578063de4b05481461018d578063fd614f41146101b85761007b565b8063365a86fc146100805780633bf237d5146100ab5780636b29e1bd146100e85761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100956101f5565b6040516100a2919061090c565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd91906109ea565b610219565b6040516100df9190610a74565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610da0565b61038a565b60405161011c9190610a74565b60405180910390f35b34801561013157600080fd5b5061013a6104e0565b6040516101479190610e7f565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610e9a565b610504565b6040516101849190610feb565b60405180910390f35b34801561019957600080fd5b506101a2610542565b6040516101af919061102e565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da91906110da565b610566565b6040516101ec9190610feb565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610246867f0000000000000000000000000000000000000000000000000000000000000000856106ef565b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018662ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161033b9190611267565b6020604051808303816000875af115801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e9190611298565b91505095945050505050565b60008773ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000886040518363ffffffff1660e01b81526004016103e79291906112d4565b6020604051808303816000875af1158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190611335565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636b29e1bd898989898989896040518863ffffffff1660e01b81526004016104909796959493929190611596565b6020604051808303816000875af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190611298565b9050979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060888888888888888860405160200161052598979695949392919061161b565b604051602081830303815290604052905098975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008790506000806000806000806000806105838c8c610844565b97509750975097509750975097509750600089116105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd906116fd565b60405180910390fd5b60008711610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061090611769565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f906117d5565b60405180910390fd5b8e73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146106cb576106c88f878a8c8b610219565b98505b6106da86868b8787878761038a565b50505050505050505050979650505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016107249291906112d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161078e9190611831565b6000604051808303816000865af19150503d80600081146107cb576040519150601f19603f3d011682016040523d82523d6000602084013e6107d0565b606091505b50915091508180156107fe57506000815114806107fd5750808060200190518101906107fc9190611335565b5b5b61083d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083490611894565b60405180910390fd5b5050505050565b60008060008060008060006060898981019061086091906118f2565b809850819950829a50839b50849c50859d50869e50879f5050505050505050509295985092959890939650565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108d26108cd6108c88461088d565b6108ad565b61088d565b9050919050565b60006108e4826108b7565b9050919050565b60006108f6826108d9565b9050919050565b610906816108eb565b82525050565b600060208201905061092160008301846108fd565b92915050565b6000604051905090565b600080fd5b600080fd5b60006109468261088d565b9050919050565b6109568161093b565b811461096157600080fd5b50565b6000813590506109738161094d565b92915050565b600062ffffff82169050919050565b61099181610979565b811461099c57600080fd5b50565b6000813590506109ae81610988565b92915050565b6000819050919050565b6109c7816109b4565b81146109d257600080fd5b50565b6000813590506109e4816109be565b92915050565b600080600080600060a08688031215610a0657610a05610931565b5b6000610a1488828901610964565b9550506020610a2588828901610964565b9450506040610a368882890161099f565b9350506060610a47888289016109d5565b9250506080610a58888289016109d5565b9150509295509295909350565b610a6e816109b4565b82525050565b6000602082019050610a896000830184610a65565b92915050565b600063ffffffff82169050919050565b610aa881610a8f565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b1982610ad0565b810181811067ffffffffffffffff82111715610b3857610b37610ae1565b5b80604052505050565b6000610b4b610927565b9050610b578282610b10565b919050565b600067ffffffffffffffff821115610b7757610b76610ae1565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610bb257610bb1610ae1565b5b602082029050602081019050919050565b60048110610bd057600080fd5b50565b600081359050610be281610bc3565b92915050565b6000610bfb610bf684610b97565b610b41565b90508083825260208201905060208402830185811115610c1e57610c1d610b88565b5b835b81811015610c475780610c338882610bd3565b845260208401935050602081019050610c20565b5050509392505050565b600082601f830112610c6657610c65610acb565b5b8135610c76848260208601610be8565b91505092915050565b600060408284031215610c9557610c94610b8d565b5b610c9f6040610b41565b90506000610caf84828501610964565b600083015250602082013567ffffffffffffffff811115610cd357610cd2610b92565b5b610cdf84828501610c51565b60208301525092915050565b6000610cfe610cf984610b5c565b610b41565b90508083825260208201905060208402830185811115610d2157610d20610b88565b5b835b81811015610d6857803567ffffffffffffffff811115610d4657610d45610acb565b5b808601610d538982610c7f565b85526020850194505050602081019050610d23565b5050509392505050565b600082601f830112610d8757610d86610acb565b5b8135610d97848260208601610ceb565b91505092915050565b600080600080600080600060e0888a031215610dbf57610dbe610931565b5b6000610dcd8a828b01610964565b9750506020610dde8a828b01610964565b9650506040610def8a828b016109d5565b9550506060610e008a828b01610ab6565b9450506080610e118a828b01610ab6565b93505060a0610e228a828b01610964565b92505060c088013567ffffffffffffffff811115610e4357610e42610936565b5b610e4f8a828b01610d72565b91505092959891949750929550565b6000610e69826108d9565b9050919050565b610e7981610e5e565b82525050565b6000602082019050610e946000830184610e70565b92915050565b600080600080600080600080610100898b031215610ebb57610eba610931565b5b6000610ec98b828c0161099f565b9850506020610eda8b828c016109d5565b9750506040610eeb8b828c01610964565b9650506060610efc8b828c01610964565b9550506080610f0d8b828c01610ab6565b94505060a0610f1e8b828c01610ab6565b93505060c0610f2f8b828c01610964565b92505060e089013567ffffffffffffffff811115610f5057610f4f610936565b5b610f5c8b828c01610d72565b9150509295985092959890939650565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fa6578082015181840152602081019050610f8b565b60008484015250505050565b6000610fbd82610f6c565b610fc78185610f77565b9350610fd7818560208601610f88565b610fe081610ad0565b840191505092915050565b600060208201905081810360008301526110058184610fb2565b905092915050565b6000611018826108d9565b9050919050565b6110288161100d565b82525050565b6000602082019050611043600083018461101f565b92915050565b6000819050919050565b61105c81611049565b811461106757600080fd5b50565b60008135905061107981611053565b92915050565b600080fd5b60008083601f84011261109a57611099610acb565b5b8235905067ffffffffffffffff8111156110b7576110b661107f565b5b6020830191508360018202830111156110d3576110d2610b88565b5b9250929050565b600080600080600080600060c0888a0312156110f9576110f8610931565b5b60006111078a828b0161106a565b97505060206111188a828b016109d5565b96505060406111298a828b01610964565b955050606061113a8a828b01610964565b945050608061114b8a828b01610ab6565b93505060a088013567ffffffffffffffff81111561116c5761116b610936565b5b6111788a828b01611084565b925092505092959891949750929550565b6111928161093b565b82525050565b6111a181610979565b82525050565b6111b0816109b4565b82525050565b6111bf8161088d565b82525050565b610100820160008201516111dc6000850182611189565b5060208201516111ef6020850182611189565b5060408201516112026040850182611198565b5060608201516112156060850182611189565b50608082015161122860808501826111a7565b5060a082015161123b60a08501826111a7565b5060c082015161124e60c08501826111a7565b5060e082015161126160e08501826111b6565b50505050565b60006101008201905061127d60008301846111c5565b92915050565b600081519050611292816109be565b92915050565b6000602082840312156112ae576112ad610931565b5b60006112bc84828501611283565b91505092915050565b6112ce8161093b565b82525050565b60006040820190506112e960008301856112c5565b6112f66020830184610a65565b9392505050565b60008115159050919050565b611312816112fd565b811461131d57600080fd5b50565b60008151905061132f81611309565b92915050565b60006020828403121561134b5761134a610931565b5b600061135984828501611320565b91505092915050565b61136b81610a8f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611409576114086113c9565b5b50565b600081905061141a826113f8565b919050565b600061142a8261140c565b9050919050565b61143a8161141f565b82525050565b600061144c8383611431565b60208301905092915050565b6000602082019050919050565b60006114708261139d565b61147a81856113a8565b9350611485836113b9565b8060005b838110156114b657815161149d8882611440565b97506114a883611458565b925050600181019050611489565b5085935050505092915050565b60006040830160008301516114db6000860182611189565b50602083015184820360208601526114f38282611465565b9150508091505092915050565b600061150c83836114c3565b905092915050565b6000602082019050919050565b600061152c82611371565b611536818561137c565b9350836020820285016115488561138d565b8060005b8581101561158457848403895281516115658582611500565b945061157083611514565b925060208a0199505060018101905061154c565b50829750879550505050505092915050565b600060e0820190506115ab600083018a6112c5565b6115b860208301896112c5565b6115c56040830188610a65565b6115d26060830187611362565b6115df6080830186611362565b6115ec60a08301856112c5565b81810360c08301526115fe8184611521565b905098975050505050505050565b61161581610979565b82525050565b600061010082019050611631600083018b61160c565b61163e602083018a610a65565b61164b60408301896112c5565b61165860608301886112c5565b6116656080830187611362565b61167260a0830186611362565b61167f60c08301856112c5565b81810360e08301526116918184611521565b90509998505050505050505050565b600082825260208201905092915050565b7f21616d6f756e7400000000000000000000000000000000000000000000000000600082015250565b60006116e76007836116a0565b91506116f2826116b1565b602082019050919050565b60006020820190508181036000830152611716816116da565b9050919050565b7f21616d6f756e744f757400000000000000000000000000000000000000000000600082015250565b6000611753600a836116a0565b915061175e8261171d565b602082019050919050565b6000602082019050818103600083015261178281611746565b9050919050565b7f21696e76616c6964000000000000000000000000000000000000000000000000600082015250565b60006117bf6008836116a0565b91506117ca82611789565b602082019050919050565b600060208201905081810360008301526117ee816117b2565b9050919050565b600081905092915050565b600061180b82610f6c565b61181581856117f5565b9350611825818560208601610f88565b80840191505092915050565b600061183d8284611800565b915081905092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b600061187e6002836116a0565b915061188982611848565b602082019050919050565b600060208201905081810360008301526118ad81611871565b9050919050565b60006118bf8261088d565b9050919050565b6118cf816118b4565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b600080600080600080600080610100898b03121561191357611912610931565b5b60006119218b828c0161099f565b98505060206119328b828c016109d5565b97505060406119438b828c016118dd565b96505060606119548b828c016118dd565b95505060806119658b828c01610ab6565b94505060a06119768b828c01610ab6565b93505060c06119878b828c016118dd565b92505060e089013567ffffffffffffffff8111156119a8576119a7610936565b5b6119b48b828c01610d72565b915050929598509295989093965056fea26469706673582212204c7586c5ce9f0fed5b954c0a39d159b5a33e84d60f3ee37af73cfe38291627d064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,address,uint256,uint32,uint32,address,(address,uint8[])[])": {
        "params": {
          "_amount": "How many \"from\" tokens will be swapped in total",
          "_amountOfSwaps": "How many swaps to execute for this position",
          "_from": "The address of the \"from\" token",
          "_owner": "The address of the owner of the position being created",
          "_swapInterval": "How frequently the position's swaps should be executed",
          "_to": "The address of the \"to\" token"
        },
        "returns": {
          "_positionId": "The id of the created position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,address,uint256,uint32,uint32,address,(address,uint8[])[])": {
        "notice": "Creates a new position"
      },
      "hub()": {
        "notice": "MeanFinance IDCAHub contract for deposit"
      },
      "swapRouter()": {
        "notice": "UniswapV3 swap router contract to swap"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
